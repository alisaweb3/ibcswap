syntax = "proto3";

package ibc.applications.interchain_swap.v1;

option go_package = "github.com/ibcswap/ibcswap/v6/modules/apps/101-interchain-swap/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "ibc/core/client/v1/client.proto";

// Msg defines the ibc/swap Msg service.
// Msg defines the Msg service.
// Msg defines the Msg service.
service Msg {
  rpc CreatePool (MsgCreatePoolRequest) returns (MsgCreatePoolResponse);
  rpc Deposit    (MsgDepositRequest   ) returns (MsgDepositResponse   );
  rpc Withdraw   (MsgWithdrawRequest  ) returns (MsgWithdrawResponse  );
  rpc Swap       (MsgSwapRequest             ) returns (MsgSwapResponse      );
}
message MsgCreatePoolRequest {
           string sourcePort    = 1;
           string sourceChannel = 2;
           string sender        = 3;
  repeated string denoms        = 4;
  repeated uint32 decimals      = 5;
           string weight        = 6;
           uint64 inital_liquidity  = 7;
}

message MsgCreatePoolResponse {
  string poolId = 1;
}

message MsgDepositRequest {
           string                         poolId = 1;
           string                         sender = 2;
  repeated cosmos.base.v1beta1.Coin tokens = 3;
}

message MsgDepositResponse {
  cosmos.base.v1beta1.Coin poolToken = 1;
}

message MsgWithdrawRequest {
  string                         sender   = 1;
  cosmos.base.v1beta1.Coin poolCoin = 2;
  string                         denomOut = 3;
}

message MsgWithdrawResponse {
  repeated cosmos.base.v1beta1.Coin tokens = 1;
}

enum SwapMsgType {
  LEFT = 0;
  RIGHT = 1;
}
message MsgSwapRequest {
  SwapMsgType swap_type = 1;
  string sender    = 2;
  cosmos.base.v1beta1.Coin tokenIn = 3;
  cosmos.base.v1beta1.Coin tokenOut = 4;
  uint64 slippage  = 5;
  string recipient = 6;
}

message MsgSwapResponse {
  SwapMsgType swap_type = 1;
  repeated cosmos.base.v1beta1.Coin tokens = 2;
}