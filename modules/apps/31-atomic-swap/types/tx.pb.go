// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/atomic_swap/v1/tx.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/ibc-go/v4/modules/core/02-client/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between
// ICS20 enabled chains. See ICS Spec here:
// https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
type MsgSwap struct {
	// the port on which the packet will be sent
	SourcePort string `protobuf:"bytes,1,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty" yaml:"source_port"`
	// the channel by which the packet will be sent
	SourceChannel string `protobuf:"bytes,2,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty" yaml:"source_channel"`
	// the tokens to be transferred
	SendingToken   types.Coin `protobuf:"bytes,3,opt,name=sending_token,json=sendingToken,proto3" json:"sending_token"`
	ReceivingToken types.Coin `protobuf:"bytes,4,opt,name=receiving_token,json=receivingToken,proto3" json:"receiving_token"`
	// the sender address
	SenderAddress string `protobuf:"bytes,5,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty" yaml:"sender_address"`
	// the sender's address on the destination chain
	SenderReceivingAddress string `protobuf:"bytes,6,opt,name=sender_receiving_address,json=senderReceivingAddress,proto3" json:"sender_receiving_address,omitempty" yaml:"sender_receiving_address"`
	// if expected_counterparty_address is specified,
	// only the expected_counterparty_address is allowed to accept this deal
	// this is address on destination chain
	ExpectedCounterpartyAddress string `protobuf:"bytes,7,opt,name=expected_counterparty_address,json=expectedCounterpartyAddress,proto3" json:"expected_counterparty_address,omitempty"`
	// Timeout height relative to the current block height.
	// The timeout is disabled when set to 0.
	TimeoutHeight types1.Height `protobuf:"bytes,8,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	// Timeout timestamp in absolute nanoseconds since unix epoch.
	// The timeout is disabled when set to 0.
	TimeoutTimestamp uint64 `protobuf:"varint,9,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
}

func (m *MsgSwap) Reset()         { *m = MsgSwap{} }
func (m *MsgSwap) String() string { return proto.CompactTextString(m) }
func (*MsgSwap) ProtoMessage()    {}
func (*MsgSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1643ac8f5889421, []int{0}
}
func (m *MsgSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwap.Merge(m, src)
}
func (m *MsgSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwap proto.InternalMessageInfo

// MsgSwapResponse defines the Msg/Swap response type.
type MsgSwapResponse struct {
}

func (m *MsgSwapResponse) Reset()         { *m = MsgSwapResponse{} }
func (m *MsgSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSwapResponse) ProtoMessage()    {}
func (*MsgSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1643ac8f5889421, []int{1}
}
func (m *MsgSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapResponse.Merge(m, src)
}
func (m *MsgSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSwap)(nil), "ibc.applications.atomic_swap.v1.MsgSwap")
	proto.RegisterType((*MsgSwapResponse)(nil), "ibc.applications.atomic_swap.v1.MsgSwapResponse")
}

func init() {
	proto.RegisterFile("ibc/applications/atomic_swap/v1/tx.proto", fileDescriptor_b1643ac8f5889421)
}

var fileDescriptor_b1643ac8f5889421 = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x4e, 0xdc, 0x30,
	0x10, 0xc6, 0x37, 0x65, 0xf9, 0x67, 0x0a, 0x94, 0xa8, 0x45, 0x61, 0x5b, 0x12, 0x94, 0x5e, 0xf6,
	0x52, 0xbb, 0x0b, 0x95, 0x2a, 0x71, 0x6a, 0x17, 0x0e, 0xf4, 0x80, 0x54, 0xa5, 0x9c, 0x2a, 0xb5,
	0x5b, 0xc7, 0x19, 0x65, 0xad, 0x6e, 0xec, 0x28, 0xf6, 0x2e, 0xf0, 0x06, 0x3d, 0xf6, 0x11, 0x78,
	0x84, 0x3e, 0x06, 0x47, 0x8e, 0x3d, 0xad, 0x2a, 0xb8, 0xf4, 0xbc, 0x4f, 0x50, 0x39, 0x4e, 0x60,
	0x57, 0x1c, 0xca, 0x29, 0xf6, 0xcc, 0xef, 0xfb, 0x26, 0x63, 0x8d, 0x8d, 0xda, 0x3c, 0x66, 0x84,
	0xe6, 0xf9, 0x80, 0x33, 0xaa, 0xb9, 0x14, 0x8a, 0x50, 0x2d, 0x33, 0xce, 0x7a, 0xea, 0x94, 0xe6,
	0x64, 0xd4, 0x21, 0xfa, 0x0c, 0xe7, 0x85, 0xd4, 0xd2, 0x0d, 0x78, 0xcc, 0xf0, 0x34, 0x89, 0xa7,
	0x48, 0x3c, 0xea, 0xb4, 0x9e, 0xa6, 0x32, 0x95, 0x25, 0x4b, 0xcc, 0xca, 0xca, 0x5a, 0x3e, 0x93,
	0x2a, 0x93, 0x8a, 0xc4, 0x54, 0x01, 0x19, 0x75, 0x62, 0xd0, 0xb4, 0x43, 0x98, 0xe4, 0xa2, 0xca,
	0x1b, 0x5b, 0xc2, 0x64, 0x01, 0x84, 0x0d, 0x38, 0x08, 0x6d, 0x6a, 0xda, 0x95, 0x05, 0xc2, 0x5f,
	0xf3, 0x68, 0xf1, 0x58, 0xa5, 0x9f, 0x4e, 0x69, 0xee, 0xbe, 0x45, 0x2b, 0x4a, 0x0e, 0x0b, 0x06,
	0xbd, 0x5c, 0x16, 0xda, 0x73, 0x76, 0x9c, 0xf6, 0x72, 0x77, 0x73, 0x32, 0x0e, 0xdc, 0x73, 0x9a,
	0x0d, 0xf6, 0xc3, 0xa9, 0x64, 0x18, 0x21, 0xbb, 0xfb, 0x28, 0x0b, 0xed, 0xbe, 0x43, 0x6b, 0x55,
	0x8e, 0xf5, 0xa9, 0x10, 0x30, 0xf0, 0x1e, 0x95, 0xda, 0xad, 0xc9, 0x38, 0x78, 0x36, 0xa3, 0xad,
	0xf2, 0x61, 0xb4, 0x6a, 0x03, 0x07, 0x76, 0xef, 0x1e, 0xa2, 0x55, 0x05, 0x22, 0xe1, 0x22, 0xed,
	0x69, 0xf9, 0x1d, 0x84, 0x37, 0xb7, 0xe3, 0xb4, 0x57, 0x76, 0xb7, 0xb0, 0xed, 0x0f, 0x9b, 0xfe,
	0x70, 0xd5, 0x1f, 0x3e, 0x90, 0x5c, 0x74, 0x9b, 0x97, 0xe3, 0xa0, 0x11, 0x3d, 0xae, 0x54, 0x27,
	0x46, 0xe4, 0x1e, 0xa1, 0xf5, 0x02, 0x18, 0xf0, 0xd1, 0x9d, 0x4f, 0xf3, 0x61, 0x3e, 0x6b, 0xb7,
	0x3a, 0xeb, 0x64, 0x3a, 0x02, 0x91, 0x40, 0xd1, 0xa3, 0x49, 0x52, 0x80, 0x52, 0xde, 0xfc, 0xbd,
	0x8e, 0x66, 0xf2, 0xa6, 0xa3, 0x32, 0xf0, 0xde, 0xee, 0xdd, 0x2f, 0xc8, 0xab, 0x88, 0xbb, 0x5f,
	0xaa, 0xbd, 0x16, 0x4a, 0xaf, 0x97, 0x93, 0x71, 0x10, 0xcc, 0x78, 0xdd, 0x23, 0xc3, 0x68, 0xd3,
	0xa6, 0xa2, 0x3a, 0x53, 0xdb, 0x77, 0xd1, 0x36, 0x9c, 0xe5, 0xc0, 0x34, 0x24, 0x3d, 0x26, 0x87,
	0x42, 0x43, 0x91, 0xd3, 0x42, 0x9f, 0xdf, 0xd6, 0x58, 0x34, 0x35, 0xa2, 0xe7, 0x35, 0x74, 0x30,
	0xc5, 0xd4, 0x1e, 0xdf, 0xd0, 0x9a, 0xe6, 0x19, 0xc8, 0xa1, 0xee, 0xf5, 0x81, 0xa7, 0x7d, 0xed,
	0x2d, 0x95, 0xa7, 0xd5, 0xc2, 0x66, 0x18, 0xcd, 0xd4, 0xe0, 0x6a, 0x56, 0x46, 0x1d, 0x7c, 0x54,
	0x12, 0xdd, 0x6d, 0x73, 0x5c, 0x77, 0x87, 0x30, 0xab, 0x0f, 0xa3, 0xd5, 0x2a, 0x60, 0x69, 0xf7,
	0x03, 0xda, 0xa8, 0x09, 0xf3, 0x55, 0x9a, 0x66, 0xb9, 0xb7, 0xbc, 0xe3, 0xb4, 0x9b, 0xdd, 0x17,
	0x93, 0x71, 0xe0, 0xcd, 0x9a, 0xdc, 0x22, 0x61, 0xf4, 0xa4, 0x8a, 0x9d, 0xd4, 0xa1, 0xfd, 0xa5,
	0x1f, 0x17, 0x41, 0xe3, 0xef, 0x45, 0xd0, 0x08, 0x37, 0xd0, 0x7a, 0x35, 0xb1, 0x11, 0xa8, 0x5c,
	0x0a, 0x05, 0xbb, 0x1c, 0xcd, 0x1d, 0xab, 0xd4, 0x8d, 0x51, 0xb3, 0x1c, 0xe4, 0x36, 0xfe, 0xcf,
	0x6d, 0xc2, 0x95, 0x41, 0xeb, 0xf5, 0x43, 0xc9, 0xba, 0x54, 0xf7, 0xeb, 0xe5, 0xb5, 0xef, 0x5c,
	0x5d, 0xfb, 0xce, 0x9f, 0x6b, 0xdf, 0xf9, 0x79, 0xe3, 0x37, 0xae, 0x6e, 0xfc, 0xc6, 0xef, 0x1b,
	0xbf, 0xf1, 0xf9, 0x30, 0xe5, 0xba, 0x3f, 0x8c, 0x31, 0x93, 0x19, 0x51, 0x3c, 0x81, 0xf2, 0x82,
	0x31, 0x39, 0x20, 0x3c, 0x66, 0xf6, 0xbe, 0xbf, 0x21, 0x99, 0x4c, 0x86, 0x03, 0x50, 0xe6, 0x4d,
	0x50, 0x64, 0xaf, 0xf3, 0x6a, 0xfa, 0x39, 0xd0, 0xe7, 0x39, 0xa8, 0x78, 0xa1, 0x94, 0xed, 0xfd,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x33, 0xc8, 0x1e, 0x3b, 0x04, 0x00, 0x00,
}

func (m *MsgSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.ExpectedCounterpartyAddress) > 0 {
		i -= len(m.ExpectedCounterpartyAddress)
		copy(dAtA[i:], m.ExpectedCounterpartyAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExpectedCounterpartyAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SenderReceivingAddress) > 0 {
		i -= len(m.SenderReceivingAddress)
		copy(dAtA[i:], m.SenderReceivingAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SenderReceivingAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.ReceivingToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.SendingToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SourceChannel) > 0 {
		i -= len(m.SourceChannel)
		copy(dAtA[i:], m.SourceChannel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceChannel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourcePort) > 0 {
		i -= len(m.SourcePort)
		copy(dAtA[i:], m.SourcePort)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourcePort)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourcePort)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SourceChannel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.SendingToken.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ReceivingToken.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SenderReceivingAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExpectedCounterpartyAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	return n
}

func (m *MsgSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendingToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SendingToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivingToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReceivingToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderReceivingAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderReceivingAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedCounterpartyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedCounterpartyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
