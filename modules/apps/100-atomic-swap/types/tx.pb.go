// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/atomic_swap/v1/tx.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/ibc-go/v6/modules/core/02-client/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MakeSwapMsg struct {
	// the port on which the packet will be sent
	SourcePort string `protobuf:"bytes,1,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty" yaml:"source_port"`
	// the channel by which the packet will be sent
	SourceChannel string `protobuf:"bytes,2,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty" yaml:"source_channel"`
	// the tokens to be sell
	SellToken types.Coin `protobuf:"bytes,3,opt,name=sell_token,json=sellToken,proto3" json:"sell_token"`
	BuyToken  types.Coin `protobuf:"bytes,4,opt,name=buy_token,json=buyToken,proto3" json:"buy_token"`
	// the sender address
	MakerAddress string `protobuf:"bytes,5,opt,name=maker_address,json=makerAddress,proto3" json:"maker_address,omitempty" yaml:"maker_address"`
	// the sender's address on the destination chain
	MakerReceivingAddress string `protobuf:"bytes,6,opt,name=maker_receiving_address,json=makerReceivingAddress,proto3" json:"maker_receiving_address,omitempty" yaml:"maker_receiving_address"`
	// if desired_taker is specified,
	// only the desired_taker is allowed to take this order
	// this is address on destination chain
	DesiredTaker    string `protobuf:"bytes,7,opt,name=desired_taker,json=desiredTaker,proto3" json:"desired_taker,omitempty"`
	CreateTimestamp int64  `protobuf:"varint,8,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty"`
	// Timeout height relative to the current block height.
	// The timeout is disabled when set to 0.
	TimeoutHeight types1.Height `protobuf:"bytes,9,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	// Timeout timestamp in absolute nanoseconds since unix epoch.
	// The timeout is disabled when set to 0.
	TimeoutTimestamp    uint64 `protobuf:"varint,10,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
	ExpirationTimestamp uint64 `protobuf:"varint,11,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty" yaml:"expiration_timestamp"`
}

func (m *MakeSwapMsg) Reset()         { *m = MakeSwapMsg{} }
func (m *MakeSwapMsg) String() string { return proto.CompactTextString(m) }
func (*MakeSwapMsg) ProtoMessage()    {}
func (*MakeSwapMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1643ac8f5889421, []int{0}
}
func (m *MakeSwapMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MakeSwapMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MakeSwapMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MakeSwapMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MakeSwapMsg.Merge(m, src)
}
func (m *MakeSwapMsg) XXX_Size() int {
	return m.Size()
}
func (m *MakeSwapMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_MakeSwapMsg.DiscardUnknown(m)
}

var xxx_messageInfo_MakeSwapMsg proto.InternalMessageInfo

type MsgMakeSwapResponse struct {
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *MsgMakeSwapResponse) Reset()         { *m = MsgMakeSwapResponse{} }
func (m *MsgMakeSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMakeSwapResponse) ProtoMessage()    {}
func (*MsgMakeSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1643ac8f5889421, []int{1}
}
func (m *MsgMakeSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMakeSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMakeSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMakeSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMakeSwapResponse.Merge(m, src)
}
func (m *MsgMakeSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMakeSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMakeSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMakeSwapResponse proto.InternalMessageInfo

func (m *MsgMakeSwapResponse) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type TakeSwapMsg struct {
	OrderId string `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// the tokens to be sell
	SellToken types.Coin `protobuf:"bytes,4,opt,name=sell_token,json=sellToken,proto3" json:"sell_token"`
	// the sender address
	TakerAddress string `protobuf:"bytes,5,opt,name=taker_address,json=takerAddress,proto3" json:"taker_address,omitempty" yaml:"taker_address"`
	// the sender's address on the destination chain
	TakerReceivingAddress string `protobuf:"bytes,6,opt,name=taker_receiving_address,json=takerReceivingAddress,proto3" json:"taker_receiving_address,omitempty" yaml:"taker_receiving_address"`
	// Timeout height relative to the current block height.
	// The timeout is disabled when set to 0.
	TimeoutHeight types1.Height `protobuf:"bytes,7,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	// Timeout timestamp in absolute nanoseconds since unix epoch.
	// The timeout is disabled when set to 0.
	TimeoutTimestamp uint64 `protobuf:"varint,8,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
	CreateTimestamp  int64  `protobuf:"varint,9,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty"`
}

func (m *TakeSwapMsg) Reset()         { *m = TakeSwapMsg{} }
func (m *TakeSwapMsg) String() string { return proto.CompactTextString(m) }
func (*TakeSwapMsg) ProtoMessage()    {}
func (*TakeSwapMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1643ac8f5889421, []int{2}
}
func (m *TakeSwapMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TakeSwapMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TakeSwapMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TakeSwapMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TakeSwapMsg.Merge(m, src)
}
func (m *TakeSwapMsg) XXX_Size() int {
	return m.Size()
}
func (m *TakeSwapMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TakeSwapMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TakeSwapMsg proto.InternalMessageInfo

type MsgTakeSwapResponse struct {
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *MsgTakeSwapResponse) Reset()         { *m = MsgTakeSwapResponse{} }
func (m *MsgTakeSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTakeSwapResponse) ProtoMessage()    {}
func (*MsgTakeSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1643ac8f5889421, []int{3}
}
func (m *MsgTakeSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTakeSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTakeSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTakeSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTakeSwapResponse.Merge(m, src)
}
func (m *MsgTakeSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTakeSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTakeSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTakeSwapResponse proto.InternalMessageInfo

func (m *MsgTakeSwapResponse) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type CancelSwapMsg struct {
	OrderId string `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// the sender address
	MakerAddress string `protobuf:"bytes,5,opt,name=maker_address,json=makerAddress,proto3" json:"maker_address,omitempty" yaml:"maker_address"`
	// Timeout height relative to the current block height.
	// The timeout is disabled when set to 0.
	TimeoutHeight types1.Height `protobuf:"bytes,8,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	// Timeout timestamp in absolute nanoseconds since unix epoch.
	// The timeout is disabled when set to 0.
	TimeoutTimestamp uint64 `protobuf:"varint,9,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
	CreateTimestamp  int64  `protobuf:"varint,10,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty"`
}

func (m *CancelSwapMsg) Reset()         { *m = CancelSwapMsg{} }
func (m *CancelSwapMsg) String() string { return proto.CompactTextString(m) }
func (*CancelSwapMsg) ProtoMessage()    {}
func (*CancelSwapMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1643ac8f5889421, []int{4}
}
func (m *CancelSwapMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelSwapMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelSwapMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelSwapMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelSwapMsg.Merge(m, src)
}
func (m *CancelSwapMsg) XXX_Size() int {
	return m.Size()
}
func (m *CancelSwapMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelSwapMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CancelSwapMsg proto.InternalMessageInfo

type MsgCancelSwapResponse struct {
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *MsgCancelSwapResponse) Reset()         { *m = MsgCancelSwapResponse{} }
func (m *MsgCancelSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSwapResponse) ProtoMessage()    {}
func (*MsgCancelSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1643ac8f5889421, []int{5}
}
func (m *MsgCancelSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSwapResponse.Merge(m, src)
}
func (m *MsgCancelSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSwapResponse proto.InternalMessageInfo

func (m *MsgCancelSwapResponse) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func init() {
	proto.RegisterType((*MakeSwapMsg)(nil), "ibc.applications.atomic_swap.v1.MakeSwapMsg")
	proto.RegisterType((*MsgMakeSwapResponse)(nil), "ibc.applications.atomic_swap.v1.MsgMakeSwapResponse")
	proto.RegisterType((*TakeSwapMsg)(nil), "ibc.applications.atomic_swap.v1.TakeSwapMsg")
	proto.RegisterType((*MsgTakeSwapResponse)(nil), "ibc.applications.atomic_swap.v1.MsgTakeSwapResponse")
	proto.RegisterType((*CancelSwapMsg)(nil), "ibc.applications.atomic_swap.v1.CancelSwapMsg")
	proto.RegisterType((*MsgCancelSwapResponse)(nil), "ibc.applications.atomic_swap.v1.MsgCancelSwapResponse")
}

func init() {
	proto.RegisterFile("ibc/applications/atomic_swap/v1/tx.proto", fileDescriptor_b1643ac8f5889421)
}

var fileDescriptor_b1643ac8f5889421 = []byte{
	// 830 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4d, 0x6f, 0xf3, 0x44,
	0x10, 0x8e, 0x13, 0xb7, 0x71, 0x36, 0x6f, 0x5e, 0x82, 0xdb, 0x82, 0x1b, 0xc0, 0x8e, 0xcc, 0x25,
	0x48, 0xd4, 0x6e, 0x0a, 0x2a, 0x52, 0x45, 0x51, 0x49, 0x2f, 0x34, 0x52, 0x24, 0x64, 0x72, 0xea,
	0xc5, 0xf8, 0x63, 0xe5, 0xac, 0x6a, 0x7b, 0x2d, 0xef, 0x26, 0x6d, 0xfe, 0x01, 0x47, 0x7e, 0x42,
	0x7f, 0x4e, 0x8f, 0x3d, 0x22, 0x21, 0x45, 0xa8, 0xbd, 0xc0, 0x91, 0x9c, 0x39, 0x20, 0x7b, 0x9d,
	0xc6, 0x69, 0x02, 0x4d, 0xe0, 0x55, 0x4f, 0xf6, 0xce, 0x3c, 0xf3, 0xcc, 0xee, 0xcc, 0x33, 0xf6,
	0x82, 0x16, 0xb2, 0x1d, 0xdd, 0x8a, 0x22, 0x1f, 0x39, 0x16, 0x45, 0x38, 0x24, 0xba, 0x45, 0x71,
	0x80, 0x1c, 0x93, 0x5c, 0x5b, 0x91, 0x3e, 0x6a, 0xeb, 0xf4, 0x46, 0x8b, 0x62, 0x4c, 0xb1, 0xa8,
	0x20, 0xdb, 0xd1, 0xf2, 0x48, 0x2d, 0x87, 0xd4, 0x46, 0xed, 0xc6, 0xae, 0x87, 0x3d, 0x9c, 0x62,
	0xf5, 0xe4, 0x8d, 0x85, 0x35, 0x64, 0x07, 0x93, 0x00, 0x13, 0xdd, 0xb6, 0x08, 0xd4, 0x47, 0x6d,
	0x1b, 0x52, 0xab, 0xad, 0x3b, 0x18, 0x85, 0x99, 0x3f, 0xa1, 0xd5, 0x1d, 0x1c, 0x43, 0xdd, 0xf1,
	0x11, 0x0c, 0x69, 0x92, 0x93, 0xbd, 0x31, 0x80, 0xfa, 0xd7, 0x16, 0xa8, 0xf6, 0xac, 0x2b, 0xf8,
	0xc3, 0xb5, 0x15, 0xf5, 0x88, 0x27, 0x7e, 0x05, 0xaa, 0x04, 0x0f, 0x63, 0x07, 0x9a, 0x11, 0x8e,
	0xa9, 0xc4, 0x35, 0xb9, 0x56, 0xa5, 0xf3, 0xc1, 0x74, 0xa2, 0x88, 0x63, 0x2b, 0xf0, 0x4f, 0xd4,
	0x9c, 0x53, 0x35, 0x00, 0x5b, 0x7d, 0x8f, 0x63, 0x2a, 0x9e, 0x81, 0xb7, 0x99, 0xcf, 0x19, 0x58,
	0x61, 0x08, 0x7d, 0xa9, 0x98, 0xc6, 0xee, 0x4f, 0x27, 0xca, 0xde, 0x42, 0x6c, 0xe6, 0x57, 0x8d,
	0x1a, 0x33, 0x9c, 0xb3, 0xb5, 0xf8, 0x0d, 0x00, 0x04, 0xfa, 0xbe, 0x49, 0xf1, 0x15, 0x0c, 0xa5,
	0x52, 0x93, 0x6b, 0x55, 0x8f, 0xf6, 0x35, 0x76, 0x40, 0x2d, 0x39, 0xa0, 0x96, 0x1d, 0x50, 0x3b,
	0xc7, 0x28, 0xec, 0xf0, 0x77, 0x13, 0xa5, 0x60, 0x54, 0x92, 0x90, 0x7e, 0x12, 0x21, 0x7e, 0x0d,
	0x2a, 0xf6, 0x70, 0x9c, 0x85, 0xf3, 0xeb, 0x85, 0x0b, 0xf6, 0x70, 0xcc, 0xa2, 0x4f, 0x41, 0x2d,
	0xb0, 0xae, 0x60, 0x6c, 0x5a, 0xae, 0x1b, 0x43, 0x42, 0xa4, 0xad, 0x74, 0xfb, 0xd2, 0x74, 0xa2,
	0xec, 0xb2, 0xed, 0x2f, 0xb8, 0x55, 0xe3, 0x4d, 0xba, 0xfe, 0x96, 0x2d, 0xc5, 0x4b, 0xf0, 0x21,
	0xf3, 0xc7, 0xd0, 0x81, 0x68, 0x84, 0x42, 0xef, 0x89, 0x68, 0x3b, 0x25, 0x52, 0xa7, 0x13, 0x45,
	0xce, 0x13, 0x2d, 0x01, 0x55, 0x63, 0x2f, 0xf5, 0x18, 0x33, 0xc7, 0x8c, 0xfb, 0x53, 0x50, 0x73,
	0x21, 0x41, 0x31, 0x74, 0x4d, 0x9a, 0x00, 0xa4, 0x72, 0xc2, 0x68, 0xbc, 0xc9, 0x8c, 0xfd, 0xc4,
	0x26, 0x7e, 0x06, 0xea, 0x4e, 0x0c, 0x2d, 0x0a, 0x4d, 0x8a, 0x02, 0x48, 0xa8, 0x15, 0x44, 0x92,
	0xd0, 0xe4, 0x5a, 0x25, 0xe3, 0x3d, 0x66, 0xef, 0xcf, 0xcc, 0xe2, 0x8f, 0xe0, 0x6d, 0x82, 0xc1,
	0x43, 0x6a, 0x0e, 0x20, 0xf2, 0x06, 0x54, 0xaa, 0xa4, 0xd5, 0x6a, 0x68, 0x89, 0x08, 0x13, 0xb5,
	0x68, 0x99, 0x46, 0x46, 0x6d, 0xed, 0xbb, 0x14, 0xd1, 0xf9, 0x24, 0x29, 0xd7, 0xbc, 0x95, 0x8b,
	0xf1, 0xaa, 0x51, 0xcb, 0x0c, 0x0c, 0x2d, 0x5e, 0x80, 0xf7, 0x67, 0x88, 0xf9, 0x6e, 0x40, 0x93,
	0x6b, 0xf1, 0x9d, 0x8f, 0xa7, 0x13, 0x45, 0x5a, 0x24, 0x79, 0x82, 0xa8, 0x46, 0x3d, 0xb3, 0xcd,
	0x37, 0x6b, 0x80, 0x5d, 0x78, 0x13, 0xa1, 0x38, 0x9d, 0x8a, 0x1c, 0x5b, 0x35, 0x65, 0x53, 0xa6,
	0x13, 0xe5, 0x23, 0xc6, 0xb6, 0x0a, 0xa5, 0x1a, 0x3b, 0x73, 0xf3, 0x13, 0xe7, 0x89, 0xf0, 0xd3,
	0xad, 0x52, 0xf8, 0xfd, 0x56, 0x29, 0xa8, 0x87, 0x60, 0xa7, 0x47, 0xbc, 0xd9, 0x00, 0x18, 0x90,
	0x44, 0x38, 0x24, 0x50, 0xdc, 0x07, 0x02, 0x8e, 0x5d, 0x18, 0x9b, 0xc8, 0x65, 0x23, 0x60, 0x94,
	0xd3, 0xf5, 0x85, 0xab, 0xfe, 0x59, 0x02, 0xd5, 0x7e, 0x6e, 0x60, 0xf2, 0xd0, 0xd2, 0x02, 0xf4,
	0x99, 0xa0, 0xf9, 0x8d, 0x05, 0x7d, 0x0a, 0x6a, 0xf4, 0xdf, 0x25, 0x49, 0x9f, 0x49, 0x92, 0x3e,
	0x93, 0x24, 0x5d, 0x57, 0x92, 0xf4, 0x1f, 0x25, 0x49, 0x57, 0x4a, 0x72, 0x59, 0x42, 0xe5, 0xd7,
	0x90, 0x90, 0xf0, 0x9f, 0x24, 0xb4, 0x6a, 0x34, 0x2a, 0x2b, 0x47, 0x63, 0xae, 0x8c, 0x2e, 0x2f,
	0x70, 0xf5, 0x62, 0x97, 0x17, 0x8a, 0xf5, 0x52, 0xa6, 0x92, 0xfe, 0x06, 0x2a, 0xf9, 0xa3, 0x08,
	0x6a, 0xe7, 0x56, 0xe8, 0x40, 0x7f, 0x0d, 0x9d, 0xfc, 0xcf, 0x4f, 0xcf, 0x72, 0x2f, 0x84, 0xd7,
	0xe8, 0x45, 0xe5, 0x9d, 0xf5, 0x02, 0x6c, 0xd0, 0x8b, 0x2e, 0x2f, 0xf0, 0xf5, 0xad, 0x2e, 0x2f,
	0x6c, 0xd7, 0xcb, 0x5d, 0x5e, 0x28, 0xd7, 0x05, 0xf5, 0x08, 0xec, 0xf5, 0x88, 0x37, 0xaf, 0xf6,
	0x1a, 0xfd, 0x39, 0xfa, 0xb5, 0x08, 0x4a, 0x49, 0x57, 0x42, 0x20, 0xcc, 0x86, 0x5f, 0xfc, 0x5c,
	0x7b, 0xe1, 0x1f, 0xac, 0xe5, 0x7e, 0x94, 0x8d, 0x2f, 0x5f, 0x46, 0xaf, 0xf8, 0xb0, 0x84, 0x40,
	0xe8, 0xaf, 0x9f, 0xaf, 0xbf, 0x69, 0xbe, 0x25, 0x89, 0x52, 0x00, 0xe6, 0x85, 0x11, 0xb5, 0x17,
	0x39, 0x16, 0x34, 0xdb, 0x38, 0x5e, 0x27, 0xe7, 0x72, 0xe1, 0x3b, 0x97, 0x77, 0x0f, 0x32, 0x77,
	0xff, 0x20, 0x73, 0xbf, 0x3d, 0xc8, 0xdc, 0xcf, 0x8f, 0x72, 0xe1, 0xfe, 0x51, 0x2e, 0xfc, 0xf2,
	0x28, 0x17, 0x2e, 0xcf, 0x3c, 0x44, 0x07, 0x43, 0x5b, 0x73, 0x70, 0xa0, 0x23, 0xdb, 0x49, 0xaf,
	0x41, 0xb3, 0xe7, 0xe8, 0x58, 0x0f, 0xb0, 0x3b, 0xf4, 0x21, 0x49, 0xae, 0x4c, 0x44, 0x6f, 0x1f,
	0x1e, 0x1e, 0xb0, 0x74, 0x07, 0xa9, 0x9f, 0x8e, 0x23, 0x48, 0xec, 0xed, 0xf4, 0xde, 0xf2, 0xc5,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x19, 0x6a, 0x48, 0x92, 0x5b, 0x09, 0x00, 0x00,
}

func (m *MakeSwapMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MakeSwapMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MakeSwapMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpirationTimestamp))
		i--
		dAtA[i] = 0x58
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x50
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.CreateTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CreateTimestamp))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DesiredTaker) > 0 {
		i -= len(m.DesiredTaker)
		copy(dAtA[i:], m.DesiredTaker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DesiredTaker)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MakerReceivingAddress) > 0 {
		i -= len(m.MakerReceivingAddress)
		copy(dAtA[i:], m.MakerReceivingAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MakerReceivingAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MakerAddress) > 0 {
		i -= len(m.MakerAddress)
		copy(dAtA[i:], m.MakerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MakerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.BuyToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.SellToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SourceChannel) > 0 {
		i -= len(m.SourceChannel)
		copy(dAtA[i:], m.SourceChannel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceChannel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourcePort) > 0 {
		i -= len(m.SourcePort)
		copy(dAtA[i:], m.SourcePort)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourcePort)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMakeSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMakeSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMakeSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TakeSwapMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TakeSwapMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TakeSwapMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CreateTimestamp))
		i--
		dAtA[i] = 0x48
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.TakerReceivingAddress) > 0 {
		i -= len(m.TakerReceivingAddress)
		copy(dAtA[i:], m.TakerReceivingAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TakerReceivingAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TakerAddress) > 0 {
		i -= len(m.TakerAddress)
		copy(dAtA[i:], m.TakerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TakerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.SellToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *MsgTakeSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTakeSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTakeSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelSwapMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelSwapMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelSwapMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CreateTimestamp))
		i--
		dAtA[i] = 0x50
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.MakerAddress) > 0 {
		i -= len(m.MakerAddress)
		copy(dAtA[i:], m.MakerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MakerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MakeSwapMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourcePort)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SourceChannel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.SellToken.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.BuyToken.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.MakerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MakerReceivingAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DesiredTaker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CreateTimestamp != 0 {
		n += 1 + sovTx(uint64(m.CreateTimestamp))
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	if m.ExpirationTimestamp != 0 {
		n += 1 + sovTx(uint64(m.ExpirationTimestamp))
	}
	return n
}

func (m *MsgMakeSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *TakeSwapMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.SellToken.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.TakerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TakerReceivingAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	if m.CreateTimestamp != 0 {
		n += 1 + sovTx(uint64(m.CreateTimestamp))
	}
	return n
}

func (m *MsgTakeSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *CancelSwapMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MakerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	if m.CreateTimestamp != 0 {
		n += 1 + sovTx(uint64(m.CreateTimestamp))
	}
	return n
}

func (m *MsgCancelSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MakeSwapMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MakeSwapMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MakeSwapMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuyToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerReceivingAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerReceivingAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredTaker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesiredTaker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimestamp", wireType)
			}
			m.CreateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			m.ExpirationTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMakeSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMakeSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMakeSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TakeSwapMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TakeSwapMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TakeSwapMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerReceivingAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerReceivingAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimestamp", wireType)
			}
			m.CreateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTakeSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTakeSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTakeSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelSwapMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelSwapMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelSwapMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimestamp", wireType)
			}
			m.CreateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
