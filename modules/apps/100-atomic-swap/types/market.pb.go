// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/interchain_swap/v1/market.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoolAssetSide int32

const (
	PoolAssetSide_SOURCE PoolAssetSide = 0
	PoolAssetSide_TARGET PoolAssetSide = 1
)

var PoolAssetSide_name = map[int32]string{
	0: "SOURCE",
	1: "TARGET",
}

var PoolAssetSide_value = map[string]int32{
	"SOURCE": 0,
	"TARGET": 1,
}

func (x PoolAssetSide) String() string {
	return proto.EnumName(PoolAssetSide_name, int32(x))
}

func (PoolAssetSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b958a5b8f2d9fd58, []int{0}
}

type PoolStatus int32

const (
	PoolStatus_INITIALIZED PoolStatus = 0
	PoolStatus_ACTIVE      PoolStatus = 1
)

var PoolStatus_name = map[int32]string{
	0: "INITIALIZED",
	1: "ACTIVE",
}

var PoolStatus_value = map[string]int32{
	"INITIALIZED": 0,
	"ACTIVE":      1,
}

func (x PoolStatus) String() string {
	return proto.EnumName(PoolStatus_name, int32(x))
}

func (PoolStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b958a5b8f2d9fd58, []int{1}
}

type PoolAsset struct {
	Side    PoolAssetSide `protobuf:"varint,1,opt,name=side,proto3,enum=ibc.applications.interchain_swap.v1.PoolAssetSide" json:"side,omitempty"`
	Balance *types.Coin   `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Weight  uint32        `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Decimal uint32        `protobuf:"varint,4,opt,name=decimal,proto3" json:"decimal,omitempty"`
}

func (m *PoolAsset) Reset()         { *m = PoolAsset{} }
func (m *PoolAsset) String() string { return proto.CompactTextString(m) }
func (*PoolAsset) ProtoMessage()    {}
func (*PoolAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_b958a5b8f2d9fd58, []int{0}
}
func (m *PoolAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolAsset.Merge(m, src)
}
func (m *PoolAsset) XXX_Size() int {
	return m.Size()
}
func (m *PoolAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolAsset.DiscardUnknown(m)
}

var xxx_messageInfo_PoolAsset proto.InternalMessageInfo

func (m *PoolAsset) GetSide() PoolAssetSide {
	if m != nil {
		return m.Side
	}
	return PoolAssetSide_SOURCE
}

func (m *PoolAsset) GetBalance() *types.Coin {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *PoolAsset) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *PoolAsset) GetDecimal() uint32 {
	if m != nil {
		return m.Decimal
	}
	return 0
}

type InterchainLiquidityPool struct {
	Id                  string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator             string       `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Assets              []*PoolAsset `protobuf:"bytes,3,rep,name=assets,proto3" json:"assets,omitempty"`
	SwapFee             uint32       `protobuf:"varint,4,opt,name=swapFee,proto3" json:"swapFee,omitempty"`
	Supply              *types.Coin  `protobuf:"bytes,5,opt,name=supply,proto3" json:"supply,omitempty"`
	Status              PoolStatus   `protobuf:"varint,6,opt,name=status,proto3,enum=ibc.applications.interchain_swap.v1.PoolStatus" json:"status,omitempty"`
	PoolPrice           float32      `protobuf:"fixed32,7,opt,name=pool_price,json=poolPrice,proto3" json:"pool_price,omitempty"`
	OriginatingChainId  string       `protobuf:"bytes,8,opt,name=originatingChainId,proto3" json:"originatingChainId,omitempty"`
	CounterPartyPort    string       `protobuf:"bytes,9,opt,name=counterPartyPort,proto3" json:"counterPartyPort,omitempty"`
	CounterPartyChannel string       `protobuf:"bytes,10,opt,name=counterPartyChannel,proto3" json:"counterPartyChannel,omitempty"`
}

func (m *InterchainLiquidityPool) Reset()         { *m = InterchainLiquidityPool{} }
func (m *InterchainLiquidityPool) String() string { return proto.CompactTextString(m) }
func (*InterchainLiquidityPool) ProtoMessage()    {}
func (*InterchainLiquidityPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_b958a5b8f2d9fd58, []int{1}
}
func (m *InterchainLiquidityPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainLiquidityPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainLiquidityPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainLiquidityPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainLiquidityPool.Merge(m, src)
}
func (m *InterchainLiquidityPool) XXX_Size() int {
	return m.Size()
}
func (m *InterchainLiquidityPool) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainLiquidityPool.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainLiquidityPool proto.InternalMessageInfo

func (m *InterchainLiquidityPool) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InterchainLiquidityPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *InterchainLiquidityPool) GetAssets() []*PoolAsset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *InterchainLiquidityPool) GetSwapFee() uint32 {
	if m != nil {
		return m.SwapFee
	}
	return 0
}

func (m *InterchainLiquidityPool) GetSupply() *types.Coin {
	if m != nil {
		return m.Supply
	}
	return nil
}

func (m *InterchainLiquidityPool) GetStatus() PoolStatus {
	if m != nil {
		return m.Status
	}
	return PoolStatus_INITIALIZED
}

func (m *InterchainLiquidityPool) GetPoolPrice() float32 {
	if m != nil {
		return m.PoolPrice
	}
	return 0
}

func (m *InterchainLiquidityPool) GetOriginatingChainId() string {
	if m != nil {
		return m.OriginatingChainId
	}
	return ""
}

func (m *InterchainLiquidityPool) GetCounterPartyPort() string {
	if m != nil {
		return m.CounterPartyPort
	}
	return ""
}

func (m *InterchainLiquidityPool) GetCounterPartyChannel() string {
	if m != nil {
		return m.CounterPartyChannel
	}
	return ""
}

type InterchainMarketMaker struct {
	PoolId string                   `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	Pool   *InterchainLiquidityPool `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (m *InterchainMarketMaker) Reset()         { *m = InterchainMarketMaker{} }
func (m *InterchainMarketMaker) String() string { return proto.CompactTextString(m) }
func (*InterchainMarketMaker) ProtoMessage()    {}
func (*InterchainMarketMaker) Descriptor() ([]byte, []int) {
	return fileDescriptor_b958a5b8f2d9fd58, []int{2}
}
func (m *InterchainMarketMaker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainMarketMaker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainMarketMaker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainMarketMaker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainMarketMaker.Merge(m, src)
}
func (m *InterchainMarketMaker) XXX_Size() int {
	return m.Size()
}
func (m *InterchainMarketMaker) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainMarketMaker.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainMarketMaker proto.InternalMessageInfo

func (m *InterchainMarketMaker) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *InterchainMarketMaker) GetPool() *InterchainLiquidityPool {
	if m != nil {
		return m.Pool
	}
	return nil
}

// Deprecated: Do not use.
type MarketFeeUpdateProposal struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PoolId      string `protobuf:"bytes,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	FeeRate     uint32 `protobuf:"varint,4,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
}

func (m *MarketFeeUpdateProposal) Reset()         { *m = MarketFeeUpdateProposal{} }
func (m *MarketFeeUpdateProposal) String() string { return proto.CompactTextString(m) }
func (*MarketFeeUpdateProposal) ProtoMessage()    {}
func (*MarketFeeUpdateProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b958a5b8f2d9fd58, []int{3}
}
func (m *MarketFeeUpdateProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketFeeUpdateProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketFeeUpdateProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketFeeUpdateProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketFeeUpdateProposal.Merge(m, src)
}
func (m *MarketFeeUpdateProposal) XXX_Size() int {
	return m.Size()
}
func (m *MarketFeeUpdateProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketFeeUpdateProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MarketFeeUpdateProposal proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ibc.applications.interchain_swap.v1.PoolAssetSide", PoolAssetSide_name, PoolAssetSide_value)
	proto.RegisterEnum("ibc.applications.interchain_swap.v1.PoolStatus", PoolStatus_name, PoolStatus_value)
	proto.RegisterType((*PoolAsset)(nil), "ibc.applications.interchain_swap.v1.PoolAsset")
	proto.RegisterType((*InterchainLiquidityPool)(nil), "ibc.applications.interchain_swap.v1.InterchainLiquidityPool")
	proto.RegisterType((*InterchainMarketMaker)(nil), "ibc.applications.interchain_swap.v1.InterchainMarketMaker")
	proto.RegisterType((*MarketFeeUpdateProposal)(nil), "ibc.applications.interchain_swap.v1.MarketFeeUpdateProposal")
}

func init() {
	proto.RegisterFile("ibc/applications/interchain_swap/v1/market.proto", fileDescriptor_b958a5b8f2d9fd58)
}

var fileDescriptor_b958a5b8f2d9fd58 = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x8e, 0x13, 0x48, 0xc8, 0x89, 0xe0, 0x46, 0x73, 0xb9, 0x17, 0x83, 0xd4, 0x10, 0xa5, 0x8b,
	0xa6, 0x48, 0xd8, 0x38, 0x48, 0x5d, 0x54, 0xdd, 0xa4, 0x21, 0x41, 0x96, 0xa0, 0x8d, 0x4c, 0xe8,
	0x82, 0x45, 0xd1, 0x78, 0x3c, 0x24, 0x23, 0x1c, 0x8f, 0xeb, 0x99, 0x04, 0xb1, 0xec, 0xae, 0xcb,
	0xf6, 0x0d, 0x78, 0x8e, 0x3e, 0x41, 0x57, 0x15, 0xcb, 0x2e, 0x2b, 0xd8, 0xf4, 0x31, 0xaa, 0x99,
	0x38, 0x84, 0xb6, 0x54, 0xa5, 0x2b, 0xcf, 0xf9, 0xf9, 0xce, 0xf9, 0x7c, 0xce, 0x37, 0x03, 0x5b,
	0xcc, 0x27, 0x36, 0x8e, 0xe3, 0x90, 0x11, 0x2c, 0x19, 0x8f, 0x84, 0xcd, 0x22, 0x49, 0x13, 0x32,
	0xc0, 0x2c, 0x3a, 0x16, 0x67, 0x38, 0xb6, 0xc7, 0x8e, 0x3d, 0xc4, 0xc9, 0x29, 0x95, 0x56, 0x9c,
	0x70, 0xc9, 0xd1, 0x43, 0xe6, 0x13, 0xeb, 0x36, 0xc2, 0xfa, 0x09, 0x61, 0x8d, 0x9d, 0xb5, 0x0a,
	0xe1, 0x62, 0xc8, 0x85, 0xed, 0x63, 0x41, 0xed, 0xb1, 0xe3, 0x53, 0x89, 0x1d, 0x9b, 0x70, 0x16,
	0x4d, 0x8a, 0xac, 0x2d, 0xf7, 0x79, 0x9f, 0xeb, 0xa3, 0xad, 0x4e, 0x13, 0x6f, 0xed, 0xa3, 0x01,
	0xc5, 0x2e, 0xe7, 0x61, 0x53, 0x08, 0x2a, 0x51, 0x07, 0xe6, 0x04, 0x0b, 0xa8, 0x69, 0x54, 0x8d,
	0xfa, 0x52, 0xa3, 0x61, 0xdd, 0xa3, 0xaf, 0x75, 0x83, 0x3e, 0x60, 0x01, 0xf5, 0x34, 0x1e, 0x6d,
	0x43, 0xc1, 0xc7, 0x21, 0x8e, 0x08, 0x35, 0xb3, 0x55, 0xa3, 0x5e, 0x6a, 0xac, 0x5a, 0x13, 0x76,
	0x96, 0x62, 0x67, 0xa5, 0xec, 0xac, 0x16, 0x67, 0x91, 0x37, 0xcd, 0x44, 0xff, 0x43, 0xfe, 0x8c,
	0xb2, 0xfe, 0x40, 0x9a, 0xb9, 0xaa, 0x51, 0x5f, 0xf4, 0x52, 0x0b, 0x99, 0x50, 0x08, 0x28, 0x61,
	0x43, 0x1c, 0x9a, 0x73, 0x3a, 0x30, 0x35, 0x6b, 0x9f, 0x73, 0xb0, 0xe2, 0xde, 0x30, 0xda, 0x63,
	0x6f, 0x46, 0x2c, 0x60, 0xf2, 0x5c, 0x31, 0x42, 0x4b, 0x90, 0x65, 0x81, 0xfe, 0x91, 0xa2, 0x97,
	0x65, 0x81, 0xaa, 0x42, 0x12, 0x8a, 0x25, 0x4f, 0x34, 0xa5, 0xa2, 0x37, 0x35, 0x51, 0x07, 0xf2,
	0x58, 0xf1, 0x17, 0x66, 0xae, 0x9a, 0xab, 0x97, 0x1a, 0xd6, 0xdf, 0xfd, 0xb6, 0x97, 0xa2, 0x55,
	0x07, 0x15, 0xec, 0x50, 0x3a, 0xe5, 0x99, 0x9a, 0xc8, 0x81, 0xbc, 0x18, 0xc5, 0x71, 0x78, 0x6e,
	0xce, 0xff, 0x69, 0x1a, 0x69, 0x22, 0xda, 0x85, 0xbc, 0x90, 0x58, 0x8e, 0x84, 0x99, 0xd7, 0xbb,
	0xb0, 0xef, 0x4d, 0xea, 0x40, 0xc3, 0xbc, 0x14, 0x8e, 0x1e, 0x00, 0xc4, 0x9c, 0x87, 0xc7, 0x71,
	0xc2, 0x08, 0x35, 0x0b, 0x55, 0xa3, 0x9e, 0xf5, 0x8a, 0xca, 0xd3, 0x55, 0x0e, 0x64, 0x01, 0xe2,
	0x09, 0xeb, 0xb3, 0x08, 0x4b, 0x16, 0xf5, 0x5b, 0xaa, 0x9a, 0x1b, 0x98, 0x0b, 0x7a, 0x42, 0x77,
	0x44, 0xd0, 0x06, 0x94, 0x09, 0x1f, 0xa9, 0xce, 0x5d, 0x9c, 0xa8, 0x51, 0x27, 0xd2, 0x2c, 0xea,
	0xec, 0x5f, 0xfc, 0x68, 0x0b, 0xfe, 0xbd, 0xed, 0x6b, 0x0d, 0x70, 0x14, 0xd1, 0xd0, 0x04, 0x9d,
	0x7e, 0x57, 0xa8, 0xf6, 0xd6, 0x80, 0xff, 0x66, 0x0b, 0xdd, 0xd7, 0x77, 0x60, 0x1f, 0x9f, 0xd2,
	0x44, 0x89, 0x43, 0x91, 0x76, 0xa7, 0x2b, 0x4d, 0x2d, 0xd4, 0x85, 0x39, 0x75, 0x4a, 0x65, 0xf6,
	0xec, 0x5e, 0x53, 0xfa, 0x8d, 0x64, 0x3c, 0x5d, 0xa9, 0xf6, 0xc1, 0x80, 0x95, 0x49, 0xe7, 0x0e,
	0xa5, 0x87, 0x71, 0x80, 0x25, 0xed, 0x26, 0x3c, 0xe6, 0x02, 0x87, 0x68, 0x19, 0xe6, 0x25, 0x93,
	0x21, 0x4d, 0x49, 0x4c, 0x0c, 0x54, 0x85, 0x52, 0x40, 0x05, 0x49, 0x58, 0xac, 0x5a, 0xa6, 0xf2,
	0xba, 0xed, 0x42, 0x2b, 0x50, 0xd0, 0x4b, 0x60, 0x81, 0xd6, 0xf6, 0x8c, 0xfe, 0x2a, 0x2c, 0x9c,
	0x50, 0x7a, 0x9c, 0x60, 0x79, 0x23, 0x9a, 0x13, 0x4a, 0x3d, 0x2c, 0xe9, 0x53, 0x78, 0x77, 0xb1,
	0x9e, 0xf9, 0x76, 0xb1, 0x9e, 0x31, 0x8d, 0x8d, 0x47, 0xb0, 0xf8, 0xc3, 0x35, 0x43, 0x00, 0xf9,
	0x83, 0x97, 0x87, 0x5e, 0xab, 0x5d, 0xce, 0xa8, 0x73, 0xaf, 0xe9, 0xed, 0xb6, 0x7b, 0x65, 0x63,
	0xe3, 0x31, 0xc0, 0x4c, 0x03, 0xe8, 0x1f, 0x28, 0xb9, 0x2f, 0xdc, 0x9e, 0xdb, 0xdc, 0x73, 0x8f,
	0xda, 0x3b, 0x93, 0xd4, 0x66, 0xab, 0xe7, 0xbe, 0x6a, 0x97, 0x8d, 0xe7, 0xaf, 0x3f, 0x5d, 0x55,
	0x8c, 0xcb, 0xab, 0x8a, 0xf1, 0xf5, 0xaa, 0x62, 0xbc, 0xbf, 0xae, 0x64, 0x2e, 0xaf, 0x2b, 0x99,
	0x2f, 0xd7, 0x95, 0xcc, 0xd1, 0x4e, 0x9f, 0xc9, 0xc1, 0xc8, 0xb7, 0x08, 0x1f, 0xda, 0xcc, 0x27,
	0xfa, 0x49, 0x9a, 0x7e, 0xc7, 0x4f, 0xec, 0x21, 0x0f, 0x46, 0x21, 0x15, 0xea, 0x09, 0x13, 0xb6,
	0xb3, 0xe5, 0x6c, 0xce, 0x46, 0xbc, 0xa9, 0x73, 0xe4, 0x79, 0x4c, 0x85, 0x9f, 0xd7, 0x0f, 0xcc,
	0xf6, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x04, 0x20, 0x4a, 0xef, 0x04, 0x00, 0x00,
}

func (m *PoolAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decimal != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Decimal))
		i--
		dAtA[i] = 0x20
	}
	if m.Weight != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x18
	}
	if m.Balance != nil {
		{
			size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Side != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InterchainLiquidityPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainLiquidityPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainLiquidityPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CounterPartyChannel) > 0 {
		i -= len(m.CounterPartyChannel)
		copy(dAtA[i:], m.CounterPartyChannel)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.CounterPartyChannel)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CounterPartyPort) > 0 {
		i -= len(m.CounterPartyPort)
		copy(dAtA[i:], m.CounterPartyPort)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.CounterPartyPort)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OriginatingChainId) > 0 {
		i -= len(m.OriginatingChainId)
		copy(dAtA[i:], m.OriginatingChainId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.OriginatingChainId)))
		i--
		dAtA[i] = 0x42
	}
	if m.PoolPrice != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PoolPrice))))
		i--
		dAtA[i] = 0x3d
	}
	if m.Status != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.Supply != nil {
		{
			size, err := m.Supply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SwapFee != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.SwapFee))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMarket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InterchainMarketMaker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainMarketMaker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainMarketMaker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketFeeUpdateProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketFeeUpdateProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketFeeUpdateProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeRate != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.FeeRate))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Side != 0 {
		n += 1 + sovMarket(uint64(m.Side))
	}
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovMarket(uint64(m.Weight))
	}
	if m.Decimal != 0 {
		n += 1 + sovMarket(uint64(m.Decimal))
	}
	return n
}

func (m *InterchainLiquidityPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovMarket(uint64(l))
		}
	}
	if m.SwapFee != 0 {
		n += 1 + sovMarket(uint64(m.SwapFee))
	}
	if m.Supply != nil {
		l = m.Supply.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMarket(uint64(m.Status))
	}
	if m.PoolPrice != 0 {
		n += 5
	}
	l = len(m.OriginatingChainId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.CounterPartyPort)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.CounterPartyChannel)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func (m *InterchainMarketMaker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func (m *MarketFeeUpdateProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.FeeRate != 0 {
		n += 1 + sovMarket(uint64(m.FeeRate))
	}
	return n
}

func sovMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarket(x uint64) (n int) {
	return sovMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= PoolAssetSide(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balance == nil {
				m.Balance = &types.Coin{}
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterchainLiquidityPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainLiquidityPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainLiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &PoolAsset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFee", wireType)
			}
			m.SwapFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapFee |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Supply == nil {
				m.Supply = &types.Coin{}
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= PoolStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PoolPrice = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginatingChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginatingChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterPartyPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterPartyPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterPartyChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterPartyChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterchainMarketMaker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainMarketMaker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainMarketMaker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &InterchainLiquidityPool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketFeeUpdateProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketFeeUpdateProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketFeeUpdateProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			m.FeeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarket = fmt.Errorf("proto: unexpected end of group")
)
