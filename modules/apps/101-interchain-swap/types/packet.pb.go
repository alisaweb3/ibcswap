// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/interchain_swap/v1/packet.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/anypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Type defines a classification of swap messages
type SwapMessageType int32

const (
	// Default zero value enumeration
	UNSPECIFIED    SwapMessageType = 0
	CREATE_POOL    SwapMessageType = 1
	SINGLE_DEPOSIT SwapMessageType = 2
	DOUBLE_DEPOSIT SwapMessageType = 3
	WITHDRAW       SwapMessageType = 4
	LEFT_SWAP      SwapMessageType = 5
	RIGHT_SWAP     SwapMessageType = 6
)

var SwapMessageType_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TYPE_CREATE_POOL",
	2: "TYPE_SINGLE_DEPOSIT",
	3: "TYPE_DOUBLE_DEPOSIT",
	4: "TYPE_WITHDRAW",
	5: "TYPE_LEFT_SWAP",
	6: "TYPE_RIGHT_SWAP",
}

var SwapMessageType_value = map[string]int32{
	"TYPE_UNSPECIFIED":    0,
	"TYPE_CREATE_POOL":    1,
	"TYPE_SINGLE_DEPOSIT": 2,
	"TYPE_DOUBLE_DEPOSIT": 3,
	"TYPE_WITHDRAW":       4,
	"TYPE_LEFT_SWAP":      5,
	"TYPE_RIGHT_SWAP":     6,
}

func (x SwapMessageType) String() string {
	return proto.EnumName(SwapMessageType_name, int32(x))
}

func (SwapMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23c8ddc04cfb119f, []int{0}
}

// IBCSwapPacketData is comprised of a raw transaction, type of transaction and optional memo field.
type IBCSwapPacketData struct {
	Type SwapMessageType `protobuf:"varint,1,opt,name=type,proto3,enum=ibc.applications.interchain_swap.v1.SwapMessageType" json:"type,omitempty"`
	// marshall data of transactions
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// current pool states on source chain, could be empty.
	States []byte `protobuf:"bytes,3,opt,name=states,proto3" json:"states,omitempty"`
}

func (m *IBCSwapPacketData) Reset()         { *m = IBCSwapPacketData{} }
func (m *IBCSwapPacketData) String() string { return proto.CompactTextString(m) }
func (*IBCSwapPacketData) ProtoMessage()    {}
func (*IBCSwapPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_23c8ddc04cfb119f, []int{0}
}
func (m *IBCSwapPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCSwapPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCSwapPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCSwapPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCSwapPacketData.Merge(m, src)
}
func (m *IBCSwapPacketData) XXX_Size() int {
	return m.Size()
}
func (m *IBCSwapPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCSwapPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_IBCSwapPacketData proto.InternalMessageInfo

func (m *IBCSwapPacketData) GetType() SwapMessageType {
	if m != nil {
		return m.Type
	}
	return UNSPECIFIED
}

func (m *IBCSwapPacketData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *IBCSwapPacketData) GetStates() []byte {
	if m != nil {
		return m.States
	}
	return nil
}

func init() {
	proto.RegisterEnum("ibc.applications.interchain_swap.v1.SwapMessageType", SwapMessageType_name, SwapMessageType_value)
	proto.RegisterType((*IBCSwapPacketData)(nil), "ibc.applications.interchain_swap.v1.IBCSwapPacketData")
}

func init() {
	proto.RegisterFile("ibc/applications/interchain_swap/v1/packet.proto", fileDescriptor_23c8ddc04cfb119f)
}

var fileDescriptor_23c8ddc04cfb119f = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0xed, 0x34, 0x44, 0x70, 0xb4, 0x89, 0x39, 0x10, 0x0a, 0x1e, 0x8c, 0xa1, 0x42, 0xaa,
	0x40, 0xf5, 0x35, 0x80, 0xd8, 0x93, 0xd8, 0x6d, 0x2c, 0x85, 0xc6, 0xb2, 0x5d, 0x45, 0x30, 0x60,
	0x9d, 0xdd, 0xc3, 0xb5, 0x48, 0x73, 0xa7, 0xde, 0x25, 0x55, 0xbe, 0x01, 0x78, 0xe2, 0x0b, 0x78,
	0x62, 0xe1, 0xa3, 0x30, 0x76, 0x64, 0x44, 0xc9, 0x17, 0x41, 0xb9, 0xb4, 0xa9, 0xdb, 0xa9, 0xd3,
	0xbd, 0xfb, 0xe9, 0xf7, 0x7f, 0x6f, 0x78, 0x0f, 0xec, 0x65, 0x71, 0x82, 0x30, 0x63, 0xa3, 0x2c,
	0xc1, 0x22, 0xa3, 0x63, 0x8e, 0xb2, 0xb1, 0x20, 0x67, 0xc9, 0x09, 0xce, 0xc6, 0x11, 0x3f, 0xc7,
	0x0c, 0x4d, 0x5b, 0x88, 0xe1, 0xe4, 0x1b, 0x11, 0x16, 0x3b, 0xa3, 0x82, 0xc2, 0xed, 0x2c, 0x4e,
	0xac, 0x72, 0xc2, 0xba, 0x95, 0xb0, 0xa6, 0x2d, 0xfd, 0x59, 0x4a, 0x69, 0x3a, 0x22, 0x48, 0x46,
	0xe2, 0xc9, 0x57, 0x84, 0xc7, 0xb3, 0x55, 0x5e, 0x7f, 0x92, 0xd2, 0x94, 0xca, 0x12, 0x2d, 0xab,
	0x15, 0x7d, 0xf9, 0x43, 0x05, 0x8f, 0xdc, 0x4e, 0x37, 0x38, 0xc7, 0xcc, 0x93, 0xd3, 0x6c, 0x2c,
	0x30, 0xec, 0x81, 0xaa, 0x98, 0x31, 0xd2, 0x54, 0x4d, 0x75, 0xa7, 0xfe, 0xf6, 0xbd, 0x75, 0x87,
	0xd1, 0xd6, 0xb2, 0xc5, 0x47, 0xc2, 0x39, 0x4e, 0x49, 0x38, 0x63, 0xc4, 0x97, 0x1d, 0x20, 0x04,
	0xd5, 0x63, 0x2c, 0x70, 0xb3, 0x62, 0xaa, 0x3b, 0x9b, 0xbe, 0xac, 0xe1, 0x53, 0x50, 0xe3, 0x02,
	0x0b, 0xc2, 0x9b, 0x1b, 0x92, 0x5e, 0xfe, 0x5e, 0xff, 0xae, 0x80, 0xc6, 0xad, 0x2e, 0xf0, 0x15,
	0xd0, 0xc2, 0x4f, 0x9e, 0x13, 0x1d, 0x1d, 0x06, 0x9e, 0xd3, 0x75, 0xf7, 0x5d, 0xc7, 0xd6, 0x14,
	0xbd, 0x91, 0x17, 0xe6, 0xc3, 0x12, 0x5a, 0x6b, 0x5d, 0xdf, 0x69, 0x87, 0x4e, 0xe4, 0x0d, 0x06,
	0x7d, 0x4d, 0x5d, 0x69, 0x25, 0x04, 0xdf, 0x80, 0xc7, 0x52, 0x0b, 0xdc, 0xc3, 0x83, 0xbe, 0x13,
	0xd9, 0x8e, 0x37, 0x08, 0xdc, 0x50, 0xab, 0xe8, 0x30, 0x2f, 0xcc, 0xfa, 0x4d, 0xba, 0x96, 0xed,
	0xc1, 0x51, 0xa7, 0x24, 0x6f, 0xac, 0xe4, 0x9b, 0x14, 0x3e, 0x07, 0x5b, 0x52, 0x1e, 0xba, 0x61,
	0xcf, 0xf6, 0xdb, 0x43, 0xad, 0xaa, 0x6f, 0xe6, 0x85, 0x79, 0xff, 0xea, 0x0f, 0x5f, 0x80, 0xba,
	0x14, 0xfa, 0xce, 0x7e, 0x18, 0x05, 0xc3, 0xb6, 0xa7, 0xdd, 0xd3, 0xb7, 0xf2, 0xc2, 0x7c, 0xb0,
	0x06, 0x70, 0x1b, 0x34, 0xa4, 0xe2, 0xbb, 0x07, 0xbd, 0x4b, 0xa7, 0xa6, 0xd7, 0xf3, 0xc2, 0x04,
	0xd7, 0x44, 0xaf, 0x7e, 0xff, 0x65, 0x28, 0x9d, 0x2f, 0x7f, 0xe6, 0x86, 0x7a, 0x31, 0x37, 0xd4,
	0x7f, 0x73, 0x43, 0xfd, 0xb9, 0x30, 0x94, 0x8b, 0x85, 0xa1, 0xfc, 0x5d, 0x18, 0xca, 0x67, 0x3b,
	0xcd, 0xc4, 0xc9, 0x24, 0xb6, 0x12, 0x7a, 0x8a, 0xb2, 0x38, 0x91, 0xa7, 0x74, 0xf5, 0x4e, 0x3f,
	0xa0, 0x53, 0x7a, 0x3c, 0x19, 0x11, 0xbe, 0x3c, 0x3d, 0x8e, 0x5a, 0x7b, 0xad, 0xdd, 0xeb, 0x4d,
	0xee, 0x4a, 0x67, 0xb9, 0x35, 0x1e, 0xd7, 0xe4, 0x75, 0xbc, 0xfb, 0x1f, 0x00, 0x00, 0xff, 0xff,
	0x95, 0xb5, 0x77, 0x2c, 0xa7, 0x02, 0x00, 0x00,
}

func (m *IBCSwapPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCSwapPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCSwapPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.States) > 0 {
		i -= len(m.States)
		copy(dAtA[i:], m.States)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.States)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IBCSwapPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPacket(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.States)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IBCSwapPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCSwapPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCSwapPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SwapMessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.States = append(m.States[:0], dAtA[iNdEx:postIndex]...)
			if m.States == nil {
				m.States = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
