// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/ibcswap/v1/swap.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PoolSide defines an asset is native token or remote token on counter-party chain.
type PoolSide int32

const (
	PoolSide_POOL_SIDE_PENDING      PoolSide = 0
	PoolSide_POOL_SIDE_NATIVE_ASSET PoolSide = 1
	PoolSide_POOL_SIDE_REMOTE_ASSET PoolSide = 2
)

var PoolSide_name = map[int32]string{
	0: "POOL_SIDE_PENDING",
	1: "POOL_SIDE_NATIVE_ASSET",
	2: "POOL_SIDE_REMOTE_ASSET",
}

var PoolSide_value = map[string]int32{
	"POOL_SIDE_PENDING":      0,
	"POOL_SIDE_NATIVE_ASSET": 1,
	"POOL_SIDE_REMOTE_ASSET": 2,
}

func (x PoolSide) String() string {
	return proto.EnumName(PoolSide_name, int32(x))
}

func (PoolSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_99f3ffde9b9b26cb, []int{0}
}

// PoolStatus defines if the pool is ready for trading
type PoolStatus int32

const (
	PoolStatus_POOL_STATUS_READY   PoolStatus = 0
	PoolStatus_POOL_STATUS_INITIAL PoolStatus = 1
)

var PoolStatus_name = map[int32]string{
	0: "POOL_STATUS_READY",
	1: "POOL_STATUS_INITIAL",
}

var PoolStatus_value = map[string]int32{
	"POOL_STATUS_READY":   0,
	"POOL_STATUS_INITIAL": 1,
}

func (x PoolStatus) String() string {
	return proto.EnumName(PoolStatus_name, int32(x))
}

func (PoolStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_99f3ffde9b9b26cb, []int{1}
}

type PoolType int32

const (
	PoolType_POOL_TYPE_WEIGHTED_CROSS_CHAIN  PoolType = 0
	PoolType_POOL_TYPE_WEIGHTED_INTERN_CHAIN PoolType = 1
)

var PoolType_name = map[int32]string{
	0: "POOL_TYPE_WEIGHTED_CROSS_CHAIN",
	1: "POOL_TYPE_WEIGHTED_INTERN_CHAIN",
}

var PoolType_value = map[string]int32{
	"POOL_TYPE_WEIGHTED_CROSS_CHAIN":  0,
	"POOL_TYPE_WEIGHTED_INTERN_CHAIN": 1,
}

func (x PoolType) String() string {
	return proto.EnumName(PoolType_name, int32(x))
}

func (PoolType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_99f3ffde9b9b26cb, []int{2}
}

// Params defines the set of IBC swap parameters.
type Params struct {
	// swap_enabled enables or disables all cross-chain token transfers from this chain.
	SwapEnabled bool `protobuf:"varint,1,opt,name=swap_enabled,json=swapEnabled,proto3" json:"swap_enabled,omitempty" yaml:"swap_enabled"`
	// max_fee_rate set a max value of fee, it's base point, 1/10000
	MaxFeeRate   uint32 `protobuf:"varint,2,opt,name=max_fee_rate,json=maxFeeRate,proto3" json:"max_fee_rate,omitempty" yaml:"max_fee_rate"`
	MaxSwapRatio uint32 `protobuf:"varint,3,opt,name=max_swap_ratio,json=maxSwapRatio,proto3" json:"max_swap_ratio,omitempty" yaml:"max_swap_ratio"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_99f3ffde9b9b26cb, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSwapEnabled() bool {
	if m != nil {
		return m.SwapEnabled
	}
	return false
}

func (m *Params) GetMaxFeeRate() uint32 {
	if m != nil {
		return m.MaxFeeRate
	}
	return 0
}

func (m *Params) GetMaxSwapRatio() uint32 {
	if m != nil {
		return m.MaxSwapRatio
	}
	return 0
}

type PoolAsset struct {
	Side    PoolSide    `protobuf:"varint,1,opt,name=side,proto3,enum=ibc.applications.ibcswap.v1.PoolSide" json:"side,omitempty"`
	Balance *types.Coin `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	// percentage
	Weight   uint32 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Decimals uint32 `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
}

func (m *PoolAsset) Reset()         { *m = PoolAsset{} }
func (m *PoolAsset) String() string { return proto.CompactTextString(m) }
func (*PoolAsset) ProtoMessage()    {}
func (*PoolAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_99f3ffde9b9b26cb, []int{1}
}
func (m *PoolAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolAsset.Merge(m, src)
}
func (m *PoolAsset) XXX_Size() int {
	return m.Size()
}
func (m *PoolAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolAsset.DiscardUnknown(m)
}

var xxx_messageInfo_PoolAsset proto.InternalMessageInfo

func (m *PoolAsset) GetSide() PoolSide {
	if m != nil {
		return m.Side
	}
	return PoolSide_POOL_SIDE_PENDING
}

func (m *PoolAsset) GetBalance() *types.Coin {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *PoolAsset) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *PoolAsset) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

type BalancerLiquidityPool struct {
	Id        string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Assets    []*PoolAsset `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	PoolToken *types.Coin  `protobuf:"bytes,3,opt,name=pool_token,json=poolToken,proto3" json:"pool_token,omitempty"`
}

func (m *BalancerLiquidityPool) Reset()         { *m = BalancerLiquidityPool{} }
func (m *BalancerLiquidityPool) String() string { return proto.CompactTextString(m) }
func (*BalancerLiquidityPool) ProtoMessage()    {}
func (*BalancerLiquidityPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_99f3ffde9b9b26cb, []int{2}
}
func (m *BalancerLiquidityPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalancerLiquidityPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalancerLiquidityPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalancerLiquidityPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalancerLiquidityPool.Merge(m, src)
}
func (m *BalancerLiquidityPool) XXX_Size() int {
	return m.Size()
}
func (m *BalancerLiquidityPool) XXX_DiscardUnknown() {
	xxx_messageInfo_BalancerLiquidityPool.DiscardUnknown(m)
}

var xxx_messageInfo_BalancerLiquidityPool proto.InternalMessageInfo

func (m *BalancerLiquidityPool) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BalancerLiquidityPool) GetAssets() []*PoolAsset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *BalancerLiquidityPool) GetPoolToken() *types.Coin {
	if m != nil {
		return m.PoolToken
	}
	return nil
}

func init() {
	proto.RegisterEnum("ibc.applications.ibcswap.v1.PoolSide", PoolSide_name, PoolSide_value)
	proto.RegisterEnum("ibc.applications.ibcswap.v1.PoolStatus", PoolStatus_name, PoolStatus_value)
	proto.RegisterEnum("ibc.applications.ibcswap.v1.PoolType", PoolType_name, PoolType_value)
	proto.RegisterType((*Params)(nil), "ibc.applications.ibcswap.v1.Params")
	proto.RegisterType((*PoolAsset)(nil), "ibc.applications.ibcswap.v1.PoolAsset")
	proto.RegisterType((*BalancerLiquidityPool)(nil), "ibc.applications.ibcswap.v1.BalancerLiquidityPool")
}

func init() {
	proto.RegisterFile("ibc/applications/ibcswap/v1/swap.proto", fileDescriptor_99f3ffde9b9b26cb)
}

var fileDescriptor_99f3ffde9b9b26cb = []byte{
	// 637 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xd1, 0x4e, 0xd4, 0x4c,
	0x18, 0xdd, 0x2e, 0x64, 0x7f, 0x18, 0xf8, 0xc9, 0x3a, 0x08, 0x2c, 0x6b, 0x52, 0x48, 0x55, 0x42,
	0x48, 0x68, 0x5d, 0xf0, 0x42, 0x88, 0xd1, 0x14, 0xb6, 0x42, 0x13, 0xec, 0x6e, 0xa6, 0x55, 0x83,
	0x17, 0x36, 0xd3, 0x76, 0x5c, 0x26, 0xb6, 0x9d, 0xba, 0x33, 0x0b, 0xec, 0x5b, 0xf8, 0x0a, 0x3e,
	0x81, 0xaf, 0xe0, 0xa5, 0x97, 0x5c, 0x7a, 0x45, 0x0c, 0xbc, 0x01, 0x4f, 0x60, 0xa6, 0x5d, 0xd8,
	0x35, 0x31, 0xeb, 0x55, 0x7b, 0xe6, 0x9c, 0x33, 0x73, 0xbe, 0x93, 0x7c, 0x60, 0x8d, 0x06, 0xa1,
	0x81, 0xb3, 0x2c, 0xa6, 0x21, 0x16, 0x94, 0xa5, 0xdc, 0xa0, 0x41, 0xc8, 0xcf, 0x70, 0x66, 0x9c,
	0x36, 0x0c, 0xf9, 0xd5, 0xb3, 0x2e, 0x13, 0x0c, 0x3e, 0xa0, 0x41, 0xa8, 0x8f, 0xea, 0xf4, 0x81,
	0x4e, 0x3f, 0x6d, 0xd4, 0xef, 0x77, 0x58, 0x87, 0xe5, 0x3a, 0x43, 0xfe, 0x15, 0x96, 0xba, 0x1a,
	0x32, 0x9e, 0x30, 0x6e, 0x04, 0x98, 0x13, 0xe3, 0xb4, 0x11, 0x10, 0x81, 0x1b, 0x46, 0xc8, 0x68,
	0x3a, 0xe0, 0x1f, 0x8d, 0x7b, 0x5a, 0x9c, 0x17, 0x2a, 0xed, 0xbb, 0x02, 0x2a, 0x6d, 0xdc, 0xc5,
	0x09, 0x87, 0xbb, 0x60, 0x56, 0xd2, 0x3e, 0x49, 0x71, 0x10, 0x93, 0xa8, 0xa6, 0xac, 0x2a, 0xeb,
	0x53, 0x7b, 0x4b, 0x37, 0x97, 0x2b, 0xf3, 0x7d, 0x9c, 0xc4, 0xbb, 0xda, 0x28, 0xab, 0xa1, 0x19,
	0x09, 0xad, 0x02, 0xc1, 0x1d, 0x30, 0x9b, 0xe0, 0x73, 0xff, 0x23, 0x21, 0x7e, 0x17, 0x0b, 0x52,
	0x2b, 0xaf, 0x2a, 0xeb, 0xff, 0x8f, 0x7a, 0x47, 0x59, 0x0d, 0x81, 0x04, 0x9f, 0xbf, 0x22, 0x04,
	0x61, 0x41, 0xe0, 0x4b, 0x30, 0x27, 0xc9, 0xfc, 0xf2, 0xae, 0x4c, 0x5a, 0x9b, 0xc8, 0xcd, 0xcb,
	0x37, 0x97, 0x2b, 0x0b, 0x43, 0xf3, 0x90, 0xd7, 0x90, 0x7c, 0xcb, 0x3d, 0xc3, 0x19, 0xca, 0xe1,
	0x37, 0x05, 0x4c, 0xb7, 0x19, 0x8b, 0x4d, 0xce, 0x89, 0x80, 0x3b, 0x60, 0x92, 0xd3, 0x88, 0xe4,
	0xe9, 0xe7, 0xb6, 0x1e, 0xeb, 0x63, 0x8a, 0xd5, 0xa5, 0xcb, 0xa5, 0x11, 0x41, 0xb9, 0x05, 0x6e,
	0x83, 0xff, 0x02, 0x1c, 0xe3, 0x34, 0x2c, 0xf2, 0xcf, 0x6c, 0x2d, 0xeb, 0x45, 0xc7, 0xba, 0xec,
	0x58, 0x1f, 0x74, 0xac, 0xef, 0x33, 0x9a, 0xa2, 0x5b, 0x25, 0x5c, 0x04, 0x95, 0x33, 0x42, 0x3b,
	0x27, 0xa2, 0x88, 0x8d, 0x06, 0x08, 0xd6, 0xc1, 0x54, 0x44, 0x42, 0x9a, 0xe0, 0x98, 0xd7, 0x26,
	0x73, 0xe6, 0x0e, 0x6b, 0x5f, 0x15, 0xb0, 0xb0, 0x57, 0xf8, 0xbb, 0x47, 0xf4, 0x73, 0x8f, 0x46,
	0x54, 0xf4, 0x65, 0x18, 0x38, 0x07, 0xca, 0xb4, 0x68, 0x7e, 0x1a, 0x95, 0x69, 0x04, 0x5f, 0x80,
	0x0a, 0x96, 0x63, 0xf1, 0x5a, 0x79, 0x75, 0x62, 0x7d, 0x66, 0x6b, 0xed, 0x9f, 0xf3, 0xe4, 0x2d,
	0xa0, 0x81, 0x0b, 0x3e, 0x03, 0x20, 0x63, 0x2c, 0xf6, 0x05, 0xfb, 0x44, 0xd2, 0x3c, 0xe1, 0xd8,
	0xa9, 0xa6, 0xa5, 0xd8, 0x93, 0xda, 0x8d, 0x63, 0x30, 0x75, 0x5b, 0x0f, 0x5c, 0x00, 0xf7, 0xda,
	0xad, 0xd6, 0x91, 0xef, 0xda, 0x4d, 0xcb, 0x6f, 0x5b, 0x4e, 0xd3, 0x76, 0x0e, 0xaa, 0x25, 0x58,
	0x07, 0x8b, 0xc3, 0x63, 0xc7, 0xf4, 0xec, 0xb7, 0x96, 0x6f, 0xba, 0xae, 0xe5, 0x55, 0x95, 0x3f,
	0x39, 0x64, 0xbd, 0x6e, 0x79, 0xb7, 0x5c, 0x79, 0xe3, 0x39, 0x00, 0xf9, 0xd5, 0x02, 0x8b, 0x1e,
	0x1f, 0x5e, 0xee, 0x99, 0xde, 0x1b, 0xd7, 0x47, 0x96, 0xd9, 0x3c, 0xae, 0x96, 0xe0, 0x12, 0x98,
	0x1f, 0x3d, 0xb6, 0x1d, 0xdb, 0xb3, 0xcd, 0xa3, 0xaa, 0xb2, 0xe1, 0x16, 0xc1, 0xbc, 0x7e, 0x46,
	0xa0, 0x06, 0xd4, 0x5c, 0xe4, 0x1d, 0xb7, 0x2d, 0xff, 0x9d, 0x65, 0x1f, 0x1c, 0x7a, 0x56, 0xd3,
	0xdf, 0x47, 0x2d, 0xd7, 0xf5, 0xf7, 0x0f, 0x4d, 0xdb, 0xa9, 0x96, 0xe0, 0x43, 0xb0, 0xf2, 0x17,
	0x8d, 0xed, 0x78, 0x16, 0x72, 0x06, 0x22, 0x65, 0xef, 0xc3, 0x8f, 0x2b, 0x55, 0xb9, 0xb8, 0x52,
	0x95, 0x5f, 0x57, 0xaa, 0xf2, 0xe5, 0x5a, 0x2d, 0x5d, 0x5c, 0xab, 0xa5, 0x9f, 0xd7, 0x6a, 0xe9,
	0x7d, 0xb3, 0x43, 0xc5, 0x49, 0x2f, 0xd0, 0x43, 0x96, 0xdc, 0x2d, 0xd0, 0xdd, 0x22, 0x3d, 0x35,
	0x12, 0x16, 0xf5, 0x62, 0xc2, 0xe5, 0xa2, 0x71, 0xa3, 0xf1, 0xa4, 0xb1, 0x49, 0x53, 0x41, 0xba,
	0xe1, 0x09, 0xa6, 0xe9, 0x66, 0xae, 0x11, 0xfd, 0x8c, 0xf0, 0xa0, 0x92, 0x6f, 0xdb, 0xf6, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x6f, 0x85, 0x4f, 0x10, 0x04, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxSwapRatio != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.MaxSwapRatio))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxFeeRate != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.MaxFeeRate))
		i--
		dAtA[i] = 0x10
	}
	if m.SwapEnabled {
		i--
		if m.SwapEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decimals != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x20
	}
	if m.Weight != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x18
	}
	if m.Balance != nil {
		{
			size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Side != 0 {
		i = encodeVarintSwap(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BalancerLiquidityPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalancerLiquidityPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalancerLiquidityPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolToken != nil {
		{
			size, err := m.PoolToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSwap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSwap(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSwap(dAtA []byte, offset int, v uint64) int {
	offset -= sovSwap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapEnabled {
		n += 2
	}
	if m.MaxFeeRate != 0 {
		n += 1 + sovSwap(uint64(m.MaxFeeRate))
	}
	if m.MaxSwapRatio != 0 {
		n += 1 + sovSwap(uint64(m.MaxSwapRatio))
	}
	return n
}

func (m *PoolAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Side != 0 {
		n += 1 + sovSwap(uint64(m.Side))
	}
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovSwap(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovSwap(uint64(m.Weight))
	}
	if m.Decimals != 0 {
		n += 1 + sovSwap(uint64(m.Decimals))
	}
	return n
}

func (m *BalancerLiquidityPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSwap(uint64(l))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovSwap(uint64(l))
		}
	}
	if m.PoolToken != nil {
		l = m.PoolToken.Size()
		n += 1 + l + sovSwap(uint64(l))
	}
	return n
}

func sovSwap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSwap(x uint64) (n int) {
	return sovSwap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SwapEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeRate", wireType)
			}
			m.MaxFeeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFeeRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSwapRatio", wireType)
			}
			m.MaxSwapRatio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSwapRatio |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= PoolSide(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balance == nil {
				m.Balance = &types.Coin{}
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalancerLiquidityPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalancerLiquidityPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalancerLiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &PoolAsset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolToken == nil {
				m.PoolToken = &types.Coin{}
			}
			if err := m.PoolToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSwap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSwap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSwap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSwap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSwap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSwap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSwap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSwap = fmt.Errorf("proto: unexpected end of group")
)
