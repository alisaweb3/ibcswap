// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/interchain_swap/v1/tx.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx"
	types "github.com/cosmos/ibc-go/v6/modules/core/02-client/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/anypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SwapMsgType int32

const (
	SwapMsgType_LEFT  SwapMsgType = 0
	SwapMsgType_RIGHT SwapMsgType = 1
)

var SwapMsgType_name = map[int32]string{
	0: "LEFT",
	1: "RIGHT",
}

var SwapMsgType_value = map[string]int32{
	"LEFT":  0,
	"RIGHT": 1,
}

func (x SwapMsgType) String() string {
	return proto.EnumName(SwapMsgType_name, int32(x))
}

func (SwapMsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{0}
}

type MsgCreatePoolRequest struct {
	SourcePort          string        `protobuf:"bytes,1,opt,name=sourcePort,proto3" json:"sourcePort,omitempty"`
	SourceChannel       string        `protobuf:"bytes,2,opt,name=sourceChannel,proto3" json:"sourceChannel,omitempty"`
	Creator             string        `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	CounterPartyCreator string        `protobuf:"bytes,4,opt,name=counterPartyCreator,proto3" json:"counterPartyCreator,omitempty"`
	Liquidity           []*PoolAsset  `protobuf:"bytes,5,rep,name=liquidity,proto3" json:"liquidity,omitempty"`
	SwapFee             uint32        `protobuf:"varint,6,opt,name=swapFee,proto3" json:"swapFee,omitempty"`
	CounterPartySig     []byte        `protobuf:"bytes,7,opt,name=counterPartySig,proto3" json:"counterPartySig,omitempty"`
	TimeoutHeight       *types.Height `protobuf:"bytes,8,opt,name=timeoutHeight,proto3" json:"timeoutHeight,omitempty" yaml:"timeout_height"`
	TimeoutTimeStamp    uint64        `protobuf:"varint,9,opt,name=timeoutTimeStamp,proto3" json:"timeoutTimeStamp,omitempty"`
}

func (m *MsgCreatePoolRequest) Reset()         { *m = MsgCreatePoolRequest{} }
func (m *MsgCreatePoolRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePoolRequest) ProtoMessage()    {}
func (*MsgCreatePoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{0}
}
func (m *MsgCreatePoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePoolRequest.Merge(m, src)
}
func (m *MsgCreatePoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePoolRequest proto.InternalMessageInfo

func (m *MsgCreatePoolRequest) GetSourcePort() string {
	if m != nil {
		return m.SourcePort
	}
	return ""
}

func (m *MsgCreatePoolRequest) GetSourceChannel() string {
	if m != nil {
		return m.SourceChannel
	}
	return ""
}

func (m *MsgCreatePoolRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreatePoolRequest) GetCounterPartyCreator() string {
	if m != nil {
		return m.CounterPartyCreator
	}
	return ""
}

func (m *MsgCreatePoolRequest) GetLiquidity() []*PoolAsset {
	if m != nil {
		return m.Liquidity
	}
	return nil
}

func (m *MsgCreatePoolRequest) GetSwapFee() uint32 {
	if m != nil {
		return m.SwapFee
	}
	return 0
}

func (m *MsgCreatePoolRequest) GetCounterPartySig() []byte {
	if m != nil {
		return m.CounterPartySig
	}
	return nil
}

func (m *MsgCreatePoolRequest) GetTimeoutHeight() *types.Height {
	if m != nil {
		return m.TimeoutHeight
	}
	return nil
}

func (m *MsgCreatePoolRequest) GetTimeoutTimeStamp() uint64 {
	if m != nil {
		return m.TimeoutTimeStamp
	}
	return 0
}

type MsgCreatePoolResponse struct {
	PoolId string `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
}

func (m *MsgCreatePoolResponse) Reset()         { *m = MsgCreatePoolResponse{} }
func (m *MsgCreatePoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePoolResponse) ProtoMessage()    {}
func (*MsgCreatePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{1}
}
func (m *MsgCreatePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePoolResponse.Merge(m, src)
}
func (m *MsgCreatePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePoolResponse proto.InternalMessageInfo

func (m *MsgCreatePoolResponse) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

type MsgSingleAssetDepositRequest struct {
	PoolId           string        `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	Sender           string        `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Token            *types1.Coin  `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	TimeoutHeight    *types.Height `protobuf:"bytes,4,opt,name=timeoutHeight,proto3" json:"timeoutHeight,omitempty"`
	TimeoutTimeStamp uint64        `protobuf:"varint,5,opt,name=timeoutTimeStamp,proto3" json:"timeoutTimeStamp,omitempty"`
}

func (m *MsgSingleAssetDepositRequest) Reset()         { *m = MsgSingleAssetDepositRequest{} }
func (m *MsgSingleAssetDepositRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSingleAssetDepositRequest) ProtoMessage()    {}
func (*MsgSingleAssetDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{2}
}
func (m *MsgSingleAssetDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSingleAssetDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSingleAssetDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSingleAssetDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSingleAssetDepositRequest.Merge(m, src)
}
func (m *MsgSingleAssetDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSingleAssetDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSingleAssetDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSingleAssetDepositRequest proto.InternalMessageInfo

func (m *MsgSingleAssetDepositRequest) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *MsgSingleAssetDepositRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSingleAssetDepositRequest) GetToken() *types1.Coin {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *MsgSingleAssetDepositRequest) GetTimeoutHeight() *types.Height {
	if m != nil {
		return m.TimeoutHeight
	}
	return nil
}

func (m *MsgSingleAssetDepositRequest) GetTimeoutTimeStamp() uint64 {
	if m != nil {
		return m.TimeoutTimeStamp
	}
	return 0
}

type MsgSingleAssetDepositResponse struct {
	PoolToken *types1.Coin `protobuf:"bytes,1,opt,name=poolToken,proto3" json:"poolToken,omitempty"`
}

func (m *MsgSingleAssetDepositResponse) Reset()         { *m = MsgSingleAssetDepositResponse{} }
func (m *MsgSingleAssetDepositResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSingleAssetDepositResponse) ProtoMessage()    {}
func (*MsgSingleAssetDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{3}
}
func (m *MsgSingleAssetDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSingleAssetDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSingleAssetDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSingleAssetDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSingleAssetDepositResponse.Merge(m, src)
}
func (m *MsgSingleAssetDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSingleAssetDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSingleAssetDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSingleAssetDepositResponse proto.InternalMessageInfo

func (m *MsgSingleAssetDepositResponse) GetPoolToken() *types1.Coin {
	if m != nil {
		return m.PoolToken
	}
	return nil
}

// demo two side deposit
type MsgMultiAssetDepositRequest struct {
	PoolId           string          `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	Deposits         []*DepositAsset `protobuf:"bytes,2,rep,name=deposits,proto3" json:"deposits,omitempty"`
	TimeoutHeight    *types.Height   `protobuf:"bytes,3,opt,name=timeoutHeight,proto3" json:"timeoutHeight,omitempty"`
	TimeoutTimeStamp uint64          `protobuf:"varint,4,opt,name=timeoutTimeStamp,proto3" json:"timeoutTimeStamp,omitempty"`
}

func (m *MsgMultiAssetDepositRequest) Reset()         { *m = MsgMultiAssetDepositRequest{} }
func (m *MsgMultiAssetDepositRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMultiAssetDepositRequest) ProtoMessage()    {}
func (*MsgMultiAssetDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{4}
}
func (m *MsgMultiAssetDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMultiAssetDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMultiAssetDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMultiAssetDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMultiAssetDepositRequest.Merge(m, src)
}
func (m *MsgMultiAssetDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMultiAssetDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMultiAssetDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMultiAssetDepositRequest proto.InternalMessageInfo

func (m *MsgMultiAssetDepositRequest) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *MsgMultiAssetDepositRequest) GetDeposits() []*DepositAsset {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *MsgMultiAssetDepositRequest) GetTimeoutHeight() *types.Height {
	if m != nil {
		return m.TimeoutHeight
	}
	return nil
}

func (m *MsgMultiAssetDepositRequest) GetTimeoutTimeStamp() uint64 {
	if m != nil {
		return m.TimeoutTimeStamp
	}
	return 0
}

type DepositAsset struct {
	Sender    string       `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Balance   *types1.Coin `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Signature []byte       `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DepositAsset) Reset()         { *m = DepositAsset{} }
func (m *DepositAsset) String() string { return proto.CompactTextString(m) }
func (*DepositAsset) ProtoMessage()    {}
func (*DepositAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{5}
}
func (m *DepositAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositAsset.Merge(m, src)
}
func (m *DepositAsset) XXX_Size() int {
	return m.Size()
}
func (m *DepositAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositAsset.DiscardUnknown(m)
}

var xxx_messageInfo_DepositAsset proto.InternalMessageInfo

func (m *DepositAsset) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *DepositAsset) GetBalance() *types1.Coin {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *DepositAsset) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type MsgMultiAssetDepositResponse struct {
	PoolTokens []*types1.Coin `protobuf:"bytes,1,rep,name=poolTokens,proto3" json:"poolTokens,omitempty"`
}

func (m *MsgMultiAssetDepositResponse) Reset()         { *m = MsgMultiAssetDepositResponse{} }
func (m *MsgMultiAssetDepositResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMultiAssetDepositResponse) ProtoMessage()    {}
func (*MsgMultiAssetDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{6}
}
func (m *MsgMultiAssetDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMultiAssetDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMultiAssetDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMultiAssetDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMultiAssetDepositResponse.Merge(m, src)
}
func (m *MsgMultiAssetDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMultiAssetDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMultiAssetDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMultiAssetDepositResponse proto.InternalMessageInfo

func (m *MsgMultiAssetDepositResponse) GetPoolTokens() []*types1.Coin {
	if m != nil {
		return m.PoolTokens
	}
	return nil
}

type MsgMultiAssetWithdrawRequest struct {
	PoolId           string           `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	Sender           string           `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Withdraws        []*WithdrawAsset `protobuf:"bytes,3,rep,name=withdraws,proto3" json:"withdraws,omitempty"`
	TimeoutHeight    *types.Height    `protobuf:"bytes,4,opt,name=timeoutHeight,proto3" json:"timeoutHeight,omitempty"`
	TimeoutTimeStamp uint64           `protobuf:"varint,5,opt,name=timeoutTimeStamp,proto3" json:"timeoutTimeStamp,omitempty"`
}

func (m *MsgMultiAssetWithdrawRequest) Reset()         { *m = MsgMultiAssetWithdrawRequest{} }
func (m *MsgMultiAssetWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMultiAssetWithdrawRequest) ProtoMessage()    {}
func (*MsgMultiAssetWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{7}
}
func (m *MsgMultiAssetWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMultiAssetWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMultiAssetWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMultiAssetWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMultiAssetWithdrawRequest.Merge(m, src)
}
func (m *MsgMultiAssetWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMultiAssetWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMultiAssetWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMultiAssetWithdrawRequest proto.InternalMessageInfo

func (m *MsgMultiAssetWithdrawRequest) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *MsgMultiAssetWithdrawRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgMultiAssetWithdrawRequest) GetWithdraws() []*WithdrawAsset {
	if m != nil {
		return m.Withdraws
	}
	return nil
}

func (m *MsgMultiAssetWithdrawRequest) GetTimeoutHeight() *types.Height {
	if m != nil {
		return m.TimeoutHeight
	}
	return nil
}

func (m *MsgMultiAssetWithdrawRequest) GetTimeoutTimeStamp() uint64 {
	if m != nil {
		return m.TimeoutTimeStamp
	}
	return 0
}

type WithdrawAsset struct {
	Receiver string       `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Balance  *types1.Coin `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (m *WithdrawAsset) Reset()         { *m = WithdrawAsset{} }
func (m *WithdrawAsset) String() string { return proto.CompactTextString(m) }
func (*WithdrawAsset) ProtoMessage()    {}
func (*WithdrawAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{8}
}
func (m *WithdrawAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawAsset.Merge(m, src)
}
func (m *WithdrawAsset) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawAsset.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawAsset proto.InternalMessageInfo

func (m *WithdrawAsset) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *WithdrawAsset) GetBalance() *types1.Coin {
	if m != nil {
		return m.Balance
	}
	return nil
}

type MsgSingleAssetWithdrawRequest struct {
	Sender           string        `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	PoolCoin         *types1.Coin  `protobuf:"bytes,3,opt,name=poolCoin,proto3" json:"poolCoin,omitempty"`
	TimeoutHeight    *types.Height `protobuf:"bytes,4,opt,name=timeoutHeight,proto3" json:"timeoutHeight,omitempty"`
	TimeoutTimeStamp uint64        `protobuf:"varint,5,opt,name=timeoutTimeStamp,proto3" json:"timeoutTimeStamp,omitempty"`
}

func (m *MsgSingleAssetWithdrawRequest) Reset()         { *m = MsgSingleAssetWithdrawRequest{} }
func (m *MsgSingleAssetWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSingleAssetWithdrawRequest) ProtoMessage()    {}
func (*MsgSingleAssetWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{9}
}
func (m *MsgSingleAssetWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSingleAssetWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSingleAssetWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSingleAssetWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSingleAssetWithdrawRequest.Merge(m, src)
}
func (m *MsgSingleAssetWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSingleAssetWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSingleAssetWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSingleAssetWithdrawRequest proto.InternalMessageInfo

func (m *MsgSingleAssetWithdrawRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSingleAssetWithdrawRequest) GetPoolCoin() *types1.Coin {
	if m != nil {
		return m.PoolCoin
	}
	return nil
}

func (m *MsgSingleAssetWithdrawRequest) GetTimeoutHeight() *types.Height {
	if m != nil {
		return m.TimeoutHeight
	}
	return nil
}

func (m *MsgSingleAssetWithdrawRequest) GetTimeoutTimeStamp() uint64 {
	if m != nil {
		return m.TimeoutTimeStamp
	}
	return 0
}

type MsgSingleAssetWithdrawResponse struct {
	Tokens []*types1.Coin `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (m *MsgSingleAssetWithdrawResponse) Reset()         { *m = MsgSingleAssetWithdrawResponse{} }
func (m *MsgSingleAssetWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSingleAssetWithdrawResponse) ProtoMessage()    {}
func (*MsgSingleAssetWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{10}
}
func (m *MsgSingleAssetWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSingleAssetWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSingleAssetWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSingleAssetWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSingleAssetWithdrawResponse.Merge(m, src)
}
func (m *MsgSingleAssetWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSingleAssetWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSingleAssetWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSingleAssetWithdrawResponse proto.InternalMessageInfo

func (m *MsgSingleAssetWithdrawResponse) GetTokens() []*types1.Coin {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type MsgMultiAssetWithdrawResponse struct {
	Tokens []*types1.Coin `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (m *MsgMultiAssetWithdrawResponse) Reset()         { *m = MsgMultiAssetWithdrawResponse{} }
func (m *MsgMultiAssetWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMultiAssetWithdrawResponse) ProtoMessage()    {}
func (*MsgMultiAssetWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{11}
}
func (m *MsgMultiAssetWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMultiAssetWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMultiAssetWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMultiAssetWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMultiAssetWithdrawResponse.Merge(m, src)
}
func (m *MsgMultiAssetWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMultiAssetWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMultiAssetWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMultiAssetWithdrawResponse proto.InternalMessageInfo

func (m *MsgMultiAssetWithdrawResponse) GetTokens() []*types1.Coin {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type MsgSwapRequest struct {
	SwapType         SwapMsgType   `protobuf:"varint,1,opt,name=swap_type,json=swapType,proto3,enum=ibc.applications.interchain_swap.v1.SwapMsgType" json:"swap_type,omitempty"`
	Sender           string        `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	TokenIn          *types1.Coin  `protobuf:"bytes,3,opt,name=tokenIn,proto3" json:"tokenIn,omitempty"`
	TokenOut         *types1.Coin  `protobuf:"bytes,4,opt,name=tokenOut,proto3" json:"tokenOut,omitempty"`
	Slippage         uint64        `protobuf:"varint,5,opt,name=slippage,proto3" json:"slippage,omitempty"`
	Recipient        string        `protobuf:"bytes,6,opt,name=recipient,proto3" json:"recipient,omitempty"`
	TimeoutHeight    *types.Height `protobuf:"bytes,7,opt,name=timeoutHeight,proto3" json:"timeoutHeight,omitempty"`
	TimeoutTimeStamp uint64        `protobuf:"varint,8,opt,name=timeoutTimeStamp,proto3" json:"timeoutTimeStamp,omitempty"`
}

func (m *MsgSwapRequest) Reset()         { *m = MsgSwapRequest{} }
func (m *MsgSwapRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSwapRequest) ProtoMessage()    {}
func (*MsgSwapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{12}
}
func (m *MsgSwapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapRequest.Merge(m, src)
}
func (m *MsgSwapRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapRequest proto.InternalMessageInfo

func (m *MsgSwapRequest) GetSwapType() SwapMsgType {
	if m != nil {
		return m.SwapType
	}
	return SwapMsgType_LEFT
}

func (m *MsgSwapRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSwapRequest) GetTokenIn() *types1.Coin {
	if m != nil {
		return m.TokenIn
	}
	return nil
}

func (m *MsgSwapRequest) GetTokenOut() *types1.Coin {
	if m != nil {
		return m.TokenOut
	}
	return nil
}

func (m *MsgSwapRequest) GetSlippage() uint64 {
	if m != nil {
		return m.Slippage
	}
	return 0
}

func (m *MsgSwapRequest) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *MsgSwapRequest) GetTimeoutHeight() *types.Height {
	if m != nil {
		return m.TimeoutHeight
	}
	return nil
}

func (m *MsgSwapRequest) GetTimeoutTimeStamp() uint64 {
	if m != nil {
		return m.TimeoutTimeStamp
	}
	return 0
}

type MsgSwapResponse struct {
	SwapType SwapMsgType    `protobuf:"varint,1,opt,name=swap_type,json=swapType,proto3,enum=ibc.applications.interchain_swap.v1.SwapMsgType" json:"swap_type,omitempty"`
	Tokens   []*types1.Coin `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (m *MsgSwapResponse) Reset()         { *m = MsgSwapResponse{} }
func (m *MsgSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSwapResponse) ProtoMessage()    {}
func (*MsgSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{13}
}
func (m *MsgSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapResponse.Merge(m, src)
}
func (m *MsgSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapResponse proto.InternalMessageInfo

func (m *MsgSwapResponse) GetSwapType() SwapMsgType {
	if m != nil {
		return m.SwapType
	}
	return SwapMsgType_LEFT
}

func (m *MsgSwapResponse) GetTokens() []*types1.Coin {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type DepositSignature struct {
	Sender   string       `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Balance  *types1.Coin `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Sequence uint64       `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *DepositSignature) Reset()         { *m = DepositSignature{} }
func (m *DepositSignature) String() string { return proto.CompactTextString(m) }
func (*DepositSignature) ProtoMessage()    {}
func (*DepositSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_46ca82afc7d40094, []int{14}
}
func (m *DepositSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositSignature.Merge(m, src)
}
func (m *DepositSignature) XXX_Size() int {
	return m.Size()
}
func (m *DepositSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositSignature.DiscardUnknown(m)
}

var xxx_messageInfo_DepositSignature proto.InternalMessageInfo

func (m *DepositSignature) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *DepositSignature) GetBalance() *types1.Coin {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *DepositSignature) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func init() {
	proto.RegisterEnum("ibc.applications.interchain_swap.v1.SwapMsgType", SwapMsgType_name, SwapMsgType_value)
	proto.RegisterType((*MsgCreatePoolRequest)(nil), "ibc.applications.interchain_swap.v1.MsgCreatePoolRequest")
	proto.RegisterType((*MsgCreatePoolResponse)(nil), "ibc.applications.interchain_swap.v1.MsgCreatePoolResponse")
	proto.RegisterType((*MsgSingleAssetDepositRequest)(nil), "ibc.applications.interchain_swap.v1.MsgSingleAssetDepositRequest")
	proto.RegisterType((*MsgSingleAssetDepositResponse)(nil), "ibc.applications.interchain_swap.v1.MsgSingleAssetDepositResponse")
	proto.RegisterType((*MsgMultiAssetDepositRequest)(nil), "ibc.applications.interchain_swap.v1.MsgMultiAssetDepositRequest")
	proto.RegisterType((*DepositAsset)(nil), "ibc.applications.interchain_swap.v1.DepositAsset")
	proto.RegisterType((*MsgMultiAssetDepositResponse)(nil), "ibc.applications.interchain_swap.v1.MsgMultiAssetDepositResponse")
	proto.RegisterType((*MsgMultiAssetWithdrawRequest)(nil), "ibc.applications.interchain_swap.v1.MsgMultiAssetWithdrawRequest")
	proto.RegisterType((*WithdrawAsset)(nil), "ibc.applications.interchain_swap.v1.WithdrawAsset")
	proto.RegisterType((*MsgSingleAssetWithdrawRequest)(nil), "ibc.applications.interchain_swap.v1.MsgSingleAssetWithdrawRequest")
	proto.RegisterType((*MsgSingleAssetWithdrawResponse)(nil), "ibc.applications.interchain_swap.v1.MsgSingleAssetWithdrawResponse")
	proto.RegisterType((*MsgMultiAssetWithdrawResponse)(nil), "ibc.applications.interchain_swap.v1.MsgMultiAssetWithdrawResponse")
	proto.RegisterType((*MsgSwapRequest)(nil), "ibc.applications.interchain_swap.v1.MsgSwapRequest")
	proto.RegisterType((*MsgSwapResponse)(nil), "ibc.applications.interchain_swap.v1.MsgSwapResponse")
	proto.RegisterType((*DepositSignature)(nil), "ibc.applications.interchain_swap.v1.DepositSignature")
}

func init() {
	proto.RegisterFile("ibc/applications/interchain_swap/v1/tx.proto", fileDescriptor_46ca82afc7d40094)
}

var fileDescriptor_46ca82afc7d40094 = []byte{
	// 1116 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x6f, 0xdb, 0x36,
	0x14, 0x8e, 0x62, 0x27, 0xb1, 0x5f, 0x92, 0x36, 0x63, 0xdb, 0x41, 0xd1, 0x3a, 0xd7, 0xd0, 0x76,
	0x30, 0x8a, 0x55, 0x8a, 0x9d, 0xfd, 0x40, 0x7b, 0x6a, 0x92, 0xae, 0x6b, 0x80, 0x1a, 0x0b, 0x94,
	0x00, 0xfb, 0x05, 0x2c, 0x93, 0x65, 0x4e, 0x26, 0x2a, 0x8b, 0x8a, 0x48, 0x39, 0x35, 0x76, 0xdc,
	0x71, 0xc0, 0x30, 0x60, 0x97, 0x01, 0x03, 0xf6, 0xcf, 0xec, 0xb2, 0x63, 0x8f, 0x3b, 0x0c, 0xc3,
	0x90, 0x9c, 0x77, 0xe9, 0x61, 0xe7, 0x81, 0x34, 0x65, 0x3b, 0xfe, 0x91, 0xa8, 0x4e, 0xd0, 0x93,
	0x45, 0xf2, 0xe3, 0xd3, 0x7b, 0xdf, 0xf7, 0xf1, 0x99, 0x82, 0xf7, 0x48, 0xc3, 0xb3, 0xdd, 0x28,
	0x0a, 0x88, 0xe7, 0x72, 0x42, 0x43, 0x66, 0x93, 0x90, 0xe3, 0xd8, 0x6b, 0xb9, 0x24, 0x3c, 0x64,
	0xc7, 0x6e, 0x64, 0x77, 0xaa, 0x36, 0x7f, 0x6e, 0x45, 0x31, 0xe5, 0x14, 0xbd, 0x43, 0x1a, 0x9e,
	0x35, 0x8c, 0xb6, 0x46, 0xd0, 0x56, 0xa7, 0x6a, 0xdc, 0xf4, 0xa9, 0x4f, 0x25, 0xde, 0x16, 0x4f,
	0xbd, 0xad, 0xc6, 0xba, 0x4f, 0xa9, 0x1f, 0x60, 0x5b, 0x8e, 0x1a, 0xc9, 0xb7, 0xb6, 0x1b, 0x76,
	0xd5, 0x52, 0xc9, 0xa3, 0xac, 0x4d, 0x99, 0xdd, 0x70, 0x19, 0xb6, 0x3b, 0xd5, 0x06, 0xe6, 0x6e,
	0xd5, 0xf6, 0x28, 0x09, 0xd5, 0xba, 0xa1, 0xd6, 0xf9, 0xf3, 0xfe, 0x6a, 0x9a, 0x91, 0x71, 0x47,
	0xe4, 0xef, 0xd1, 0x18, 0xdb, 0x5e, 0x40, 0x70, 0xc8, 0x45, 0xba, 0xbd, 0x27, 0x05, 0xd8, 0xc8,
	0x52, 0x60, 0xdb, 0x8d, 0x9f, 0x61, 0xb5, 0xc3, 0xfc, 0x3d, 0x07, 0x37, 0xeb, 0xcc, 0xdf, 0x89,
	0xb1, 0xcb, 0xf1, 0x1e, 0xa5, 0x81, 0x83, 0x8f, 0x12, 0xcc, 0x38, 0x2a, 0x01, 0x30, 0x9a, 0xc4,
	0x1e, 0xde, 0xa3, 0x31, 0xd7, 0xb5, 0xb2, 0x56, 0x29, 0x3a, 0x43, 0x33, 0xe8, 0x5d, 0x58, 0xed,
	0x8d, 0x76, 0x5a, 0x6e, 0x18, 0xe2, 0x40, 0x9f, 0x97, 0x90, 0xb3, 0x93, 0x48, 0x87, 0x25, 0x4f,
	0x84, 0xa6, 0xb1, 0x9e, 0x93, 0xeb, 0xe9, 0x10, 0x6d, 0xc0, 0x0d, 0x8f, 0x26, 0x22, 0xbb, 0x3d,
	0x37, 0xe6, 0xdd, 0x1d, 0x85, 0xca, 0x4b, 0xd4, 0xa4, 0x25, 0xf4, 0x14, 0x8a, 0x01, 0x39, 0x4a,
	0x48, 0x93, 0xf0, 0xae, 0xbe, 0x50, 0xce, 0x55, 0x96, 0x6b, 0x96, 0x95, 0x41, 0x23, 0x4b, 0x94,
	0xb5, 0xc5, 0x18, 0xe6, 0xce, 0x20, 0x80, 0xc8, 0x4c, 0xac, 0x3f, 0xc6, 0x58, 0x5f, 0x2c, 0x6b,
	0x95, 0x55, 0x27, 0x1d, 0xa2, 0x0a, 0x5c, 0x1f, 0x7e, 0xfd, 0x3e, 0xf1, 0xf5, 0xa5, 0xb2, 0x56,
	0x59, 0x71, 0x46, 0xa7, 0xd1, 0x57, 0xb0, 0xca, 0x49, 0x1b, 0xd3, 0x84, 0x3f, 0xc1, 0xc4, 0x6f,
	0x71, 0xbd, 0x50, 0xd6, 0x2a, 0xcb, 0x35, 0x43, 0x66, 0x25, 0x74, 0xb2, 0x94, 0x3a, 0x9d, 0xaa,
	0xd5, 0x43, 0x6c, 0xaf, 0xbf, 0xfc, 0xfb, 0xce, 0xad, 0xae, 0xdb, 0x0e, 0x1e, 0x98, 0x6a, 0xeb,
	0x61, 0x4b, 0xae, 0x98, 0xce, 0xd9, 0x58, 0xe8, 0x2e, 0xac, 0xa9, 0x89, 0x03, 0xd2, 0xc6, 0xfb,
	0xdc, 0x6d, 0x47, 0x7a, 0xb1, 0xac, 0x55, 0xf2, 0xce, 0xd8, 0xbc, 0x69, 0xc3, 0xad, 0x11, 0x11,
	0x59, 0x44, 0x43, 0x86, 0xd1, 0x9b, 0xb0, 0x18, 0x51, 0x1a, 0xec, 0x36, 0x95, 0x82, 0x6a, 0x64,
	0xfe, 0xab, 0xc1, 0xed, 0x3a, 0xf3, 0xf7, 0x49, 0xe8, 0x07, 0x58, 0x72, 0xf3, 0x08, 0x47, 0x94,
	0x11, 0x9e, 0xca, 0x3f, 0x65, 0xa3, 0x98, 0x67, 0x38, 0x6c, 0xe2, 0x58, 0xe9, 0xad, 0x46, 0xc8,
	0x86, 0x05, 0x4e, 0x9f, 0xe1, 0x50, 0xca, 0xbc, 0x5c, 0x5b, 0xb7, 0x7a, 0x36, 0xb6, 0x84, 0xcd,
	0x2d, 0x65, 0x64, 0x6b, 0x87, 0x92, 0xd0, 0xe9, 0xe1, 0xd0, 0xc3, 0x51, 0xee, 0xf2, 0x17, 0x71,
	0x97, 0x85, 0xa0, 0x85, 0x29, 0x04, 0x7d, 0x0e, 0x6f, 0x4f, 0x29, 0x57, 0x11, 0xf5, 0x11, 0x14,
	0x45, 0x85, 0x07, 0xb2, 0x06, 0xed, 0xa2, 0x1a, 0x06, 0x58, 0xf3, 0xa5, 0x06, 0x6f, 0xd5, 0x99,
	0x5f, 0x4f, 0x02, 0x4e, 0x5e, 0x85, 0xc8, 0x3a, 0x14, 0x9a, 0x3d, 0x24, 0xd3, 0xe7, 0xa5, 0x99,
	0xab, 0x99, 0xcc, 0xac, 0xc2, 0xf7, 0xfc, 0xdc, 0x0f, 0x31, 0x4e, 0x67, 0xee, 0x2a, 0xe8, 0xcc,
	0x4f, 0xa1, 0xb3, 0x0b, 0x2b, 0xc3, 0x79, 0x0c, 0xb9, 0x42, 0x3b, 0xe3, 0x8a, 0x4d, 0x58, 0x6a,
	0xb8, 0x81, 0x1b, 0x7a, 0x58, 0xda, 0xe5, 0x5c, 0x4e, 0x53, 0x24, 0xba, 0x0d, 0x45, 0x46, 0xfc,
	0xd0, 0xe5, 0x49, 0x8c, 0x65, 0x06, 0x2b, 0xce, 0x60, 0xc2, 0xfc, 0x42, 0x1a, 0x77, 0x02, 0xdd,
	0x4a, 0xc8, 0xfb, 0x00, 0x7d, 0x71, 0x98, 0xae, 0x49, 0x66, 0xcf, 0x79, 0xeb, 0x10, 0xd8, 0xfc,
	0x71, 0x7e, 0x24, 0xf6, 0x67, 0x84, 0xb7, 0x9a, 0xb1, 0x7b, 0x3c, 0xeb, 0xa1, 0xd8, 0x83, 0xe2,
	0xb1, 0x0a, 0xc1, 0xf4, 0x9c, 0x4c, 0xa5, 0x96, 0x49, 0xe4, 0xf4, 0xc5, 0xaa, 0x6b, 0xf5, 0x83,
	0xbc, 0xe6, 0x53, 0xf3, 0x0d, 0xac, 0x9e, 0xc9, 0x04, 0x19, 0x50, 0x88, 0xb1, 0x87, 0x49, 0xa7,
	0xaf, 0x74, 0x7f, 0x3c, 0x93, 0xd6, 0xe6, 0x5f, 0xda, 0xe8, 0xc1, 0x9c, 0xc0, 0xf9, 0x44, 0x6b,
	0x7d, 0x00, 0x05, 0xc1, 0xbe, 0x08, 0x77, 0x71, 0xcf, 0xe9, 0x43, 0x5f, 0x33, 0x81, 0xfb, 0x50,
	0x9a, 0x56, 0x9d, 0xb2, 0x6b, 0x15, 0x16, 0x79, 0x46, 0xab, 0x2a, 0xa0, 0xe9, 0x48, 0xca, 0x26,
	0xb9, 0x74, 0xf6, 0x98, 0x3f, 0xe4, 0xe0, 0x9a, 0xc8, 0xf4, 0xd8, 0x8d, 0x52, 0xe2, 0xeb, 0x50,
	0x14, 0x76, 0x3c, 0xe4, 0xdd, 0x08, 0x4b, 0xee, 0xaf, 0xd5, 0x36, 0x32, 0x99, 0x57, 0x04, 0xa9,
	0x33, 0xff, 0xa0, 0x1b, 0x61, 0xa7, 0x20, 0x26, 0xc5, 0xd3, 0xd4, 0x33, 0xb2, 0x09, 0x4b, 0x32,
	0x87, 0xdd, 0x0c, 0x32, 0xa6, 0x48, 0x21, 0xbe, 0x7c, 0xfc, 0x34, 0x49, 0x05, 0x3c, 0x4f, 0xfc,
	0x14, 0x2a, 0xec, 0xcb, 0x02, 0x12, 0x45, 0xae, 0x8f, 0x95, 0x64, 0xfd, 0xb1, 0xe8, 0x3a, 0x31,
	0xf6, 0x48, 0x24, 0xc4, 0x97, 0x37, 0x82, 0xa2, 0x33, 0x98, 0x18, 0xb7, 0xcd, 0xd2, 0x55, 0xd8,
	0xa6, 0x30, 0xc5, 0x36, 0x3f, 0x6b, 0x70, 0xbd, 0xaf, 0x86, 0x12, 0xf5, 0x8a, 0xe5, 0x18, 0x78,
	0x64, 0x3e, 0xab, 0x47, 0xbe, 0x83, 0x35, 0xd5, 0x6c, 0xf7, 0xd3, 0x6e, 0x7c, 0xb5, 0x8d, 0x5f,
	0xc8, 0x23, 0xcc, 0x27, 0x76, 0xe5, 0x94, 0x3c, 0x6a, 0x7c, 0xd7, 0x84, 0xe5, 0xa1, 0x42, 0x50,
	0x01, 0xf2, 0x4f, 0x3f, 0x7e, 0x7c, 0xb0, 0x36, 0x87, 0x8a, 0xb0, 0xe0, 0xec, 0x7e, 0xf2, 0xe4,
	0x60, 0x4d, 0xab, 0xfd, 0xb7, 0x08, 0xb9, 0x3a, 0xf3, 0xd1, 0xf7, 0x1a, 0xc0, 0xe0, 0x2e, 0x84,
	0xee, 0x67, 0xa2, 0x69, 0xd2, 0x25, 0xd8, 0x78, 0x30, 0xcb, 0x56, 0x25, 0xd8, 0xaf, 0x1a, 0xa0,
	0xf1, 0x0b, 0x07, 0xda, 0xca, 0x1a, 0x72, 0xea, 0xdd, 0xcc, 0xd8, 0xbe, 0x4c, 0x08, 0x95, 0xdd,
	0x2f, 0x1a, 0xbc, 0x31, 0xf6, 0x27, 0x8a, 0x1e, 0x66, 0x8d, 0x3c, 0xed, 0xba, 0x63, 0x6c, 0x5d,
	0x22, 0x82, 0x4a, 0xed, 0x37, 0x0d, 0x6e, 0x4c, 0x68, 0x99, 0x68, 0x96, 0xb2, 0x47, 0xfe, 0x4d,
	0x8c, 0x9d, 0x4b, 0xc5, 0x18, 0x52, 0x76, 0xbc, 0xfd, 0xa2, 0x19, 0x4a, 0x1f, 0x4d, 0x6f, 0xfb,
	0x32, 0x21, 0x54, 0x76, 0x47, 0x90, 0x17, 0x27, 0x05, 0x6d, 0x66, 0x2e, 0x75, 0xd0, 0xf4, 0x8d,
	0xf7, 0x5f, 0x6d, 0x53, 0xef, 0x95, 0xdb, 0x5f, 0xff, 0x71, 0x52, 0xd2, 0x5e, 0x9c, 0x94, 0xb4,
	0x7f, 0x4e, 0x4a, 0xda, 0x4f, 0xa7, 0xa5, 0xb9, 0x17, 0xa7, 0xa5, 0xb9, 0x3f, 0x4f, 0x4b, 0x73,
	0x5f, 0x3e, 0xf2, 0x09, 0x6f, 0x25, 0x0d, 0xcb, 0xa3, 0x6d, 0x9b, 0x34, 0x3c, 0xf9, 0x09, 0x9a,
	0xfe, 0x76, 0x3e, 0xb4, 0xdb, 0xb4, 0x99, 0x04, 0x98, 0x89, 0x4f, 0x56, 0x66, 0x57, 0x37, 0xaa,
	0xf7, 0x06, 0x2f, 0xbb, 0x27, 0x31, 0xa2, 0xdb, 0xb1, 0xc6, 0xa2, 0xfc, 0x56, 0xdd, 0xfc, 0x3f,
	0x00, 0x00, 0xff, 0xff, 0x85, 0x04, 0x69, 0x7f, 0xc0, 0x0f, 0x00, 0x00,
}

func (m *MsgCreatePoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTimeStamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimeStamp))
		i--
		dAtA[i] = 0x48
	}
	if m.TimeoutHeight != nil {
		{
			size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.CounterPartySig) > 0 {
		i -= len(m.CounterPartySig)
		copy(dAtA[i:], m.CounterPartySig)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CounterPartySig)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SwapFee != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SwapFee))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Liquidity) > 0 {
		for iNdEx := len(m.Liquidity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Liquidity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CounterPartyCreator) > 0 {
		i -= len(m.CounterPartyCreator)
		copy(dAtA[i:], m.CounterPartyCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CounterPartyCreator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceChannel) > 0 {
		i -= len(m.SourceChannel)
		copy(dAtA[i:], m.SourceChannel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceChannel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourcePort) > 0 {
		i -= len(m.SourcePort)
		copy(dAtA[i:], m.SourcePort)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourcePort)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSingleAssetDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSingleAssetDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSingleAssetDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTimeStamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimeStamp))
		i--
		dAtA[i] = 0x28
	}
	if m.TimeoutHeight != nil {
		{
			size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSingleAssetDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSingleAssetDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSingleAssetDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolToken != nil {
		{
			size, err := m.PoolToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMultiAssetDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMultiAssetDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMultiAssetDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTimeStamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimeStamp))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutHeight != nil {
		{
			size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DepositAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if m.Balance != nil {
		{
			size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMultiAssetDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMultiAssetDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMultiAssetDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolTokens) > 0 {
		for iNdEx := len(m.PoolTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgMultiAssetWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMultiAssetWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMultiAssetWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTimeStamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimeStamp))
		i--
		dAtA[i] = 0x28
	}
	if m.TimeoutHeight != nil {
		{
			size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Withdraws) > 0 {
		for iNdEx := len(m.Withdraws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdraws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Balance != nil {
		{
			size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSingleAssetWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSingleAssetWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSingleAssetWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTimeStamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimeStamp))
		i--
		dAtA[i] = 0x28
	}
	if m.TimeoutHeight != nil {
		{
			size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PoolCoin != nil {
		{
			size, err := m.PoolCoin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSingleAssetWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSingleAssetWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSingleAssetWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgMultiAssetWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMultiAssetWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMultiAssetWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTimeStamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimeStamp))
		i--
		dAtA[i] = 0x40
	}
	if m.TimeoutHeight != nil {
		{
			size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x32
	}
	if m.Slippage != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Slippage))
		i--
		dAtA[i] = 0x28
	}
	if m.TokenOut != nil {
		{
			size, err := m.TokenOut.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TokenIn != nil {
		{
			size, err := m.TokenIn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.SwapType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SwapType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SwapType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SwapType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DepositSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	if m.Balance != nil {
		{
			size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreatePoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourcePort)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SourceChannel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CounterPartyCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Liquidity) > 0 {
		for _, e := range m.Liquidity {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.SwapFee != 0 {
		n += 1 + sovTx(uint64(m.SwapFee))
	}
	l = len(m.CounterPartySig)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutHeight != nil {
		l = m.TimeoutHeight.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimeStamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimeStamp))
	}
	return n
}

func (m *MsgCreatePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSingleAssetDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutHeight != nil {
		l = m.TimeoutHeight.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimeStamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimeStamp))
	}
	return n
}

func (m *MsgSingleAssetDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolToken != nil {
		l = m.PoolToken.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMultiAssetDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.TimeoutHeight != nil {
		l = m.TimeoutHeight.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimeStamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimeStamp))
	}
	return n
}

func (m *DepositAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMultiAssetDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolTokens) > 0 {
		for _, e := range m.PoolTokens {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMultiAssetWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Withdraws) > 0 {
		for _, e := range m.Withdraws {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.TimeoutHeight != nil {
		l = m.TimeoutHeight.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimeStamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimeStamp))
	}
	return n
}

func (m *WithdrawAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSingleAssetWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolCoin != nil {
		l = m.PoolCoin.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutHeight != nil {
		l = m.TimeoutHeight.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimeStamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimeStamp))
	}
	return n
}

func (m *MsgSingleAssetWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMultiAssetWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSwapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapType != 0 {
		n += 1 + sovTx(uint64(m.SwapType))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TokenIn != nil {
		l = m.TokenIn.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TokenOut != nil {
		l = m.TokenOut.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Slippage != 0 {
		n += 1 + sovTx(uint64(m.Slippage))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutHeight != nil {
		l = m.TimeoutHeight.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimeStamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimeStamp))
	}
	return n
}

func (m *MsgSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapType != 0 {
		n += 1 + sovTx(uint64(m.SwapType))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *DepositSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovTx(uint64(m.Sequence))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreatePoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterPartyCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterPartyCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidity = append(m.Liquidity, &PoolAsset{})
			if err := m.Liquidity[len(m.Liquidity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFee", wireType)
			}
			m.SwapFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapFee |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterPartySig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterPartySig = append(m.CounterPartySig[:0], dAtA[iNdEx:postIndex]...)
			if m.CounterPartySig == nil {
				m.CounterPartySig = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeoutHeight == nil {
				m.TimeoutHeight = &types.Height{}
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimeStamp", wireType)
			}
			m.TimeoutTimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimeStamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSingleAssetDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSingleAssetDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSingleAssetDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &types1.Coin{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeoutHeight == nil {
				m.TimeoutHeight = &types.Height{}
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimeStamp", wireType)
			}
			m.TimeoutTimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimeStamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSingleAssetDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSingleAssetDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSingleAssetDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolToken == nil {
				m.PoolToken = &types1.Coin{}
			}
			if err := m.PoolToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMultiAssetDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMultiAssetDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMultiAssetDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, &DepositAsset{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeoutHeight == nil {
				m.TimeoutHeight = &types.Height{}
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimeStamp", wireType)
			}
			m.TimeoutTimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimeStamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balance == nil {
				m.Balance = &types1.Coin{}
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMultiAssetDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMultiAssetDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMultiAssetDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolTokens = append(m.PoolTokens, &types1.Coin{})
			if err := m.PoolTokens[len(m.PoolTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMultiAssetWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMultiAssetWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMultiAssetWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdraws = append(m.Withdraws, &WithdrawAsset{})
			if err := m.Withdraws[len(m.Withdraws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeoutHeight == nil {
				m.TimeoutHeight = &types.Height{}
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimeStamp", wireType)
			}
			m.TimeoutTimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimeStamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balance == nil {
				m.Balance = &types1.Coin{}
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSingleAssetWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSingleAssetWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSingleAssetWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolCoin == nil {
				m.PoolCoin = &types1.Coin{}
			}
			if err := m.PoolCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeoutHeight == nil {
				m.TimeoutHeight = &types.Height{}
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimeStamp", wireType)
			}
			m.TimeoutTimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimeStamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSingleAssetWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSingleAssetWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSingleAssetWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &types1.Coin{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMultiAssetWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMultiAssetWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMultiAssetWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &types1.Coin{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapType", wireType)
			}
			m.SwapType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapType |= SwapMsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenIn == nil {
				m.TokenIn = &types1.Coin{}
			}
			if err := m.TokenIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenOut == nil {
				m.TokenOut = &types1.Coin{}
			}
			if err := m.TokenOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slippage", wireType)
			}
			m.Slippage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slippage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeoutHeight == nil {
				m.TimeoutHeight = &types.Height{}
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimeStamp", wireType)
			}
			m.TimeoutTimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimeStamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapType", wireType)
			}
			m.SwapType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapType |= SwapMsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &types1.Coin{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balance == nil {
				m.Balance = &types1.Coin{}
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
