// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/interchain_swap/v1/param.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of IBC swap parameters.
type Params struct {
	// swap_enabled enables or disables all cross-chain token transfers from this chain.
	SwapEnabled bool `protobuf:"varint,1,opt,name=swap_enabled,json=swapEnabled,proto3" json:"swap_enabled,omitempty" yaml:"swap_enabled"`
	// max_fee_rate set a max value of fee, it's base point, 1/10000
	MaxFeeRate uint32 `protobuf:"varint,2,opt,name=max_fee_rate,json=maxFeeRate,proto3" json:"max_fee_rate,omitempty" yaml:"max_fee_rate"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba9c1215275397ce, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSwapEnabled() bool {
	if m != nil {
		return m.SwapEnabled
	}
	return false
}

func (m *Params) GetMaxFeeRate() uint32 {
	if m != nil {
		return m.MaxFeeRate
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "ibc.applications.interchain_swap.v1.Params")
}

func init() {
	proto.RegisterFile("ibc/applications/interchain_swap/v1/param.proto", fileDescriptor_ba9c1215275397ce)
}

var fileDescriptor_ba9c1215275397ce = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0x73, 0x0e, 0x45, 0x62, 0x5d, 0xa2, 0x60, 0x71, 0x38, 0x4b, 0x5c, 0xba, 0x34, 0x67,
	0x10, 0x04, 0x3b, 0x16, 0x14, 0xdc, 0x24, 0xa3, 0x4b, 0x78, 0xb9, 0x3c, 0xd3, 0x83, 0x5c, 0xee,
	0xc8, 0x5d, 0x6b, 0x3b, 0xf9, 0x15, 0xfc, 0x58, 0x8e, 0x1d, 0x9d, 0x44, 0x92, 0x6f, 0xe0, 0x27,
	0x90, 0x4b, 0x06, 0x43, 0xb7, 0xf7, 0xe7, 0xff, 0xff, 0x3d, 0xde, 0xfb, 0xfb, 0x4c, 0x64, 0x9c,
	0x81, 0xd6, 0xa5, 0xe0, 0x60, 0x85, 0xaa, 0x0c, 0x13, 0x95, 0xc5, 0x9a, 0xaf, 0x40, 0x54, 0xa9,
	0x79, 0x03, 0xcd, 0x36, 0x31, 0xd3, 0x50, 0x83, 0x8c, 0x74, 0xad, 0xac, 0x0a, 0xae, 0x45, 0xc6,
	0xa3, 0x21, 0x10, 0x1d, 0x00, 0xd1, 0x26, 0xbe, 0x3c, 0x2f, 0x54, 0xa1, 0xba, 0x3c, 0x73, 0x53,
	0x8f, 0x86, 0xef, 0xfe, 0xe8, 0xd9, 0x6d, 0x32, 0xc1, 0xc2, 0x1f, 0xbb, 0x68, 0x8a, 0x15, 0x64,
	0x25, 0xe6, 0x13, 0x32, 0x25, 0xb3, 0xe3, 0xe5, 0xc5, 0xef, 0xf7, 0xd5, 0xd9, 0x0e, 0x64, 0xb9,
	0x08, 0x87, 0x6e, 0x98, 0x9c, 0x38, 0xf9, 0xd0, 0xab, 0xe0, 0xde, 0x1f, 0x4b, 0xd8, 0xa6, 0xaf,
	0x88, 0x69, 0x0d, 0x16, 0x27, 0x47, 0x53, 0x32, 0x3b, 0x1d, 0xb2, 0x43, 0x37, 0x4c, 0x7c, 0x09,
	0xdb, 0x47, 0xc4, 0x04, 0x2c, 0x2e, 0xf9, 0x67, 0x43, 0xc9, 0xbe, 0xa1, 0xe4, 0xa7, 0xa1, 0xe4,
	0xa3, 0xa5, 0xde, 0xbe, 0xa5, 0xde, 0x57, 0x4b, 0xbd, 0x97, 0xa7, 0x42, 0xd8, 0xd5, 0x3a, 0x8b,
	0xb8, 0x92, 0xcc, 0x88, 0x1c, 0xbb, 0x83, 0xb9, 0x2a, 0x5d, 0x3d, 0x7d, 0x0b, 0x77, 0x4c, 0xaa,
	0x7c, 0x5d, 0xa2, 0x71, 0x6d, 0x19, 0x16, 0xdf, 0xc4, 0xf3, 0xff, 0xc7, 0xe7, 0x5d, 0xc6, 0xee,
	0x34, 0x9a, 0x6c, 0xd4, 0xb1, 0xb7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x22, 0x9f, 0x49,
	0x5a, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxFeeRate != 0 {
		i = encodeVarintParam(dAtA, i, uint64(m.MaxFeeRate))
		i--
		dAtA[i] = 0x10
	}
	if m.SwapEnabled {
		i--
		if m.SwapEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParam(dAtA []byte, offset int, v uint64) int {
	offset -= sovParam(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapEnabled {
		n += 2
	}
	if m.MaxFeeRate != 0 {
		n += 1 + sovParam(uint64(m.MaxFeeRate))
	}
	return n
}

func sovParam(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParam(x uint64) (n int) {
	return sovParam(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SwapEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeRate", wireType)
			}
			m.MaxFeeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFeeRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParam(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParam
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParam
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParam
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParam
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParam        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParam          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParam = fmt.Errorf("proto: unexpected end of group")
)
